#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–†–í–ï–†–ê WEB SOCKET\n');
console.log('=' .repeat(50));

// 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
console.log('üìã –ü–ï–†–ï–í–Ü–†–ö–ê –°–ï–†–ï–î–û–í–ò–©–ê:');
try {
  const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
  console.log(`‚úÖ Node.js –≤–µ—Ä—Å—ñ—è: ${nodeVersion}`);

  const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
  console.log(`‚úÖ NPM –≤–µ—Ä—Å—ñ—è: ${npmVersion}`);

  const nodeEnv = process.env.NODE_ENV || 'development';
  console.log(`üìä NODE_ENV: ${nodeEnv}`);
} catch (error) {
  console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: ${error.message}`);
}

// 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤
console.log('\nüîå –ü–ï–†–ï–í–Ü–†–ö–ê –ü–û–†–¢–Ü–í:');
try {
  const port4000 = execSync('lsof -i :4000 2>/dev/null || echo "–ü–æ—Ä—Ç –≤—ñ–ª—å–Ω–∏–π"', { encoding: 'utf8' }).trim();
  console.log(`–ü–æ—Ä—Ç 4000: ${port4000 || '–≤—ñ–ª—å–Ω–∏–π'}`);

  const port3000 = execSync('lsof -i :3000 2>/dev/null || echo "–ü–æ—Ä—Ç –≤—ñ–ª—å–Ω–∏–π"', { encoding: 'utf8' }).trim();
  console.log(`–ü–æ—Ä—Ç 3000: ${port3000 || '–≤—ñ–ª—å–Ω–∏–π'}`);
} catch (error) {
  console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—Ä—Ç—ñ–≤: ${error.message}`);
}

// 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤
console.log('\n‚öôÔ∏è –ü–ï–†–ï–í–Ü–†–ö–ê –ü–†–û–¶–ï–°–Ü–í:');
try {
  const nodeProcesses = execSync('ps aux | grep node | grep -v grep | head -5', { encoding: 'utf8' });
  if (nodeProcesses.trim()) {
    console.log('Node.js –ø—Ä–æ—Ü–µ—Å–∏:');
    console.log(nodeProcesses);
  } else {
    console.log('‚ùå –ù–µ–º–∞—î –∑–∞–ø—É—â–µ–Ω–∏—Ö Node.js –ø—Ä–æ—Ü–µ—Å—ñ–≤');
  }
} catch (error) {
  console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—ñ–≤: ${error.message}`);
}

// 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
console.log('\nüìÅ –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–ô:');
const configFiles = [
  'apps/server/src/main.ts',
  'apps/server/src/chats/chats.gateway.ts',
  'apps/server/src/app.module.ts',
  'apps/server/package.json'
];

configFiles.forEach(filePath => {
  const fullPath = path.join(process.cwd(), filePath);
  if (fs.existsSync(fullPath)) {
    const stats = fs.statSync(fullPath);
    console.log(`‚úÖ ${filePath} (${stats.size} bytes)`);
  } else {
    console.log(`‚ùå ${filePath} - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
  }
});

// 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
console.log('\nüì¶ –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–õ–ï–ñ–ù–û–°–¢–ï–ô:');
const serverPackagePath = path.join(process.cwd(), 'apps/server/package.json');
if (fs.existsSync(serverPackagePath)) {
  try {
    const packageJson = JSON.parse(fs.readFileSync(serverPackagePath, 'utf8'));
    const keyDeps = ['@nestjs/websockets', 'socket.io', 'socket.io-client'];

    console.log('–ö–ª—é—á–æ–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:');
    keyDeps.forEach(dep => {
      const version = packageJson.dependencies?.[dep] || packageJson.devDependencies?.[dep];
      if (version) {
        console.log(`‚úÖ ${dep}: ${version}`);
      } else {
        console.log(`‚ùå ${dep}: –≤—ñ–¥—Å—É—Ç–Ω—è`);
      }
    });
  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è package.json: ${error.message}`);
  }
}

// 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
console.log('\nüîß –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ú–Ü–ù–ù–ò–• –°–ï–†–ï–î–û–í–ò–©–ê:');
const envVars = ['NODE_ENV', 'PORT', 'JWT_SECRET', 'TT_BASE_URL'];
envVars.forEach(varName => {
  const value = process.env[varName];
  if (value) {
    console.log(`‚úÖ ${varName}: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
  } else {
    console.log(`‚ö†Ô∏è ${varName}: –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
  }
});

// 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ä–µ–∂—ñ
console.log('\nüåê –ü–ï–†–ï–í–Ü–†–ö–ê –ú–ï–†–ï–ñ–Ü:');
try {
  execSync('curl -s --connect-timeout 5 http://localhost:4000/health || echo "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"', { stdio: 'inherit' });
} catch (error) {
  console.log('–°–µ—Ä–≤–µ—Ä –Ω–∞ localhost:4000 –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î');
}

// 8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:');
console.log('1. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π: npm run start:prod');
console.log('2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫');
console.log('3. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ reverse proxy (nginx)');
console.log('4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ CORS –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ–≥–æ –¥–æ–º–µ–Ω—É');
console.log('5. –í–ø–µ–≤–Ω—ñ—Ç—å—Å—è —â–æ SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');

console.log('\n' + '=' .repeat(50));
console.log('‚úÖ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

const fs = require('fs');

console.log('üìä –ê–Ω–∞–ª—ñ–∑ RTM –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å TalkyTimes\n');

try {
    const logContent = fs.readFileSync('/Users/ivanpenzakov/Documents/AnChat/V1/apps/server/server.log', 'utf8');
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ RTM –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const rtmMessages = [];
    const lines = logContent.split('\n');
    
    let currentMessage = null;
    let collectingMessage = false;
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        
        // –ü–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ–≥–æ RTM –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (line.includes('üì® RTM: Received message')) {
            if (currentMessage) {
                rtmMessages.push(currentMessage);
            }
            currentMessage = {
                timestamp: line.match(/\d{2}:\d{2}:\d{2}/)?.[0] || 'unknown',
                raw: '',
                parsed: null
            };
            collectingMessage = true;
            continue;
        }
        
        // –ó–±–∏—Ä–∞—î–º–æ JSON —á–∞—Å—Ç–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (collectingMessage && (line.includes('{') || line.includes('}') || line.includes('"'))) {
            currentMessage.raw += line.trim() + '\n';
            
            // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ JSON
            try {
                const cleaned = currentMessage.raw.replace(/^\[Nest\].*?LOG.*?$\n?/gm, '').trim();
                if (cleaned.startsWith('{') && cleaned.endsWith('}')) {
                    currentMessage.parsed = JSON.parse(cleaned);
                }
            } catch (e) {
                // JSON —â–µ –Ω–µ –ø–æ–≤–Ω–∏–π
            }
        }
        
        // –ö—ñ–Ω–µ—Ü—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (collectingMessage && (line.includes('LOG [TalkyTimesRTMService]') && !line.includes('üì® RTM: Received message'))) {
            collectingMessage = false;
        }
    }
    
    // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (currentMessage) {
        rtmMessages.push(currentMessage);
    }
    
    console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ ${rtmMessages.length} RTM –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n`);
    
    // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    const messageTypes = new Map();
    const pushMessages = [];
    
    rtmMessages.forEach((msg, index) => {
        if (!msg.parsed) return;
        
        // –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä—ñ–≤–Ω—ñ
        const topLevelKeys = Object.keys(msg.parsed);
        topLevelKeys.forEach(key => {
            messageTypes.set(key, (messageTypes.get(key) || 0) + 1);
        });
        
        // Push –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ)
        if (msg.parsed.push) {
            pushMessages.push({
                index,
                timestamp: msg.timestamp,
                channel: msg.parsed.push.channel,
                type: msg.parsed.push.pub?.data?.type,
                messageType: msg.parsed.push.pub?.data?.data?.message?.type,
                data: msg.parsed.push.pub?.data
            });
        }
    });
    
    console.log('üìã –¢–∏–ø–∏ RTM –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:');
    [...messageTypes.entries()]
        .sort((a, b) => b[1] - a[1])
        .forEach(([type, count]) => {
            console.log(`  ${type}: ${count} —Ä–∞–∑—ñ–≤`);
        });
    
    console.log('\nüì® Push –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ):');
    pushMessages.forEach(push => {
        console.log(`\n‚è∞ ${push.timestamp}`);
        console.log(`üì° –ö–∞–Ω–∞–ª: ${push.channel}`);
        console.log(`üè∑Ô∏è  –¢–∏–ø –ø–æ–¥—ñ—ó: ${push.type}`);
        console.log(`üí¨ –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${push.messageType}`);
        
        if (push.data?.data?.message) {
            const msg = push.data.data.message;
            console.log(`üë§ –í—ñ–¥: ${msg.idUserFrom} ‚Üí –î–æ: ${msg.idUserTo}`);
            console.log(`üÜî ID: ${msg.id}`);
            console.log(`üìÖ –î–∞—Ç–∞: ${msg.dateCreated}`);
            
            if (msg.content) {
                console.log(`üìù –ö–æ–Ω—Ç–µ–Ω—Ç:`, JSON.stringify(msg.content, null, 2));
            }
        }
        console.log('‚îÄ'.repeat(50));
    });
    
    // –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ push
    const uniqueMessageTypes = [...new Set(pushMessages.map(p => p.messageType).filter(Boolean))];
    console.log('\nüéØ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ push:');
    uniqueMessageTypes.forEach(type => {
        console.log(`  - ${type}`);
    });
    
    // –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π
    const uniqueEventTypes = [...new Set(pushMessages.map(p => p.type).filter(Boolean))];
    console.log('\nüéØ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π:');
    uniqueEventTypes.forEach(type => {
        console.log(`  - ${type}`);
    });
    
} catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
}

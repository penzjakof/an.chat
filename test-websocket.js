const { io } = require('socket.io-client');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
const SERVER_URL = 'http://localhost:4000'; // –õ–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
const TEST_TOKEN = 'test-jwt-token'; // –¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–∫–µ–Ω

console.log('üß™ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
console.log(`üì° –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ: ${SERVER_URL}/socket.io/`);

// –°—Ç–≤–æ—Ä—é—î–º–æ Socket.IO –∫–ª—ñ—î–Ω—Ç
const socket = io(SERVER_URL, {
  transports: ['websocket', 'polling'],
  auth: {
    token: TEST_TOKEN
  },
  timeout: 10000,
  reconnection: true,
  reconnectionAttempts: 3,
  reconnectionDelay: 1000
});

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
socket.on('connect', () => {
  console.log('‚úÖ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
  console.log(`üîó Socket ID: ${socket.id}`);

  // –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥—É
  socket.emit('join', {
    dialogId: 'test-user-1-test-user-2'
  }, (response) => {
    console.log('üì® –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ join:', response);
  });
});

socket.on('disconnect', (reason) => {
  console.log(`‚ùå WebSocket –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ: ${reason}`);
});

socket.on('connect_error', (error) => {
  console.error('üö´ –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è WebSocket:', error.message);
  console.error('–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', error);
});

socket.on('message', (data) => {
  console.log('üì® –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', data);
});

socket.on('message_toast', (data) => {
  console.log('üçû –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ—Å—Ç:', data);
});

// –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
setTimeout(() => {
  console.log('‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');
  socket.disconnect();
  process.exit(0);
}, 15000);

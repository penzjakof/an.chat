// –¢–∏–º—á–∞—Å–æ–≤—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –¥–µ–±–∞–≥—É
export function clearAuthToken() {
  console.log('üßπ –û—á–∏—â–∞—é —Ç–æ–∫–µ–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...');
  localStorage.removeItem('anchat-auth');
  console.log('‚úÖ –¢–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω–æ. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –Ω–∞ –ª–æ–≥—ñ–Ω...');
  window.location.href = '/login';
}

export function inspectAuthToken() {
  const token = localStorage.getItem('anchat-auth');
  console.log('üîç –Ü–Ω—Å–ø–µ–∫—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞:');
  
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
    return;
  }
  
  try {
    const parsed = JSON.parse(token);
    console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–∏–π:', {
      hasAccessToken: !!parsed.accessToken,
      tokenLength: parsed.accessToken?.length || 0,
      role: parsed.role,
      agencyCode: parsed.agencyCode,
      operatorCode: parsed.operatorCode
    });
    
    if (parsed.accessToken) {
      const parts = parsed.accessToken.split('.');
      console.log('üîç JWT —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:', {
        partsCount: parts.length,
        isValid: parts.length === 3,
        header: parts[0] ? `${parts[0].substring(0, 20)}...` : 'missing',
        payload: parts[1] ? `${parts[1].substring(0, 20)}...` : 'missing',
        signature: parts[2] ? `${parts[2].substring(0, 20)}...` : 'missing'
      });
    }
  } catch (e) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–æ–∫–µ–Ω–∞:', e);
    console.log('üßπ –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—á–∏—Å—Ç–∏—Ç–∏ —Ç–æ–∫–µ–Ω: clearAuthToken()');
  }
}

// –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ –∫–æ–Ω—Å–æ–ª—ñ
if (typeof window !== 'undefined') {
  (window as any).clearAuthToken = clearAuthToken;
  (window as any).inspectAuthToken = inspectAuthToken;
  console.log('üõ†Ô∏è Debug —É—Ç–∏–ª—ñ—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ: clearAuthToken(), inspectAuthToken()');
}

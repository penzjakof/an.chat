/**
 * –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ gRPC-Web –∑–∞–ø–∏—Ç–∞–º–∏ –¥–æ TalkTimes API
 */

/**
 * –ö–æ–¥—É—î —á–∏—Å–ª–æ —É varint —Ñ–æ—Ä–º–∞—Ç (protobuf)
 */
export function encodeVarint(value: number): Uint8Array {
  const bytes: number[] = [];
  
  while (value >= 0x80) {
    bytes.push((value & 0xFF) | 0x80);
    value >>>= 7;
  }
  bytes.push(value & 0xFF);
  
  return new Uint8Array(bytes);
}

/**
 * –î–µ–∫–æ–¥—É—î varint –∑ –±–∞–π—Ç–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É
 */
export function decodeVarint(bytes: Uint8Array, offset = 0): { value: number; bytesRead: number } {
  let value = 0;
  let shift = 0;
  let bytesRead = 0;
  
  for (let i = offset; i < bytes.length; i++) {
    const byte = bytes[i];
    bytesRead++;
    
    value |= (byte & 0x7F) << shift;
    
    if ((byte & 0x80) === 0) {
      break;
    }
    
    shift += 7;
  }
  
  return { value, bytesRead };
}

/**
 * –°—Ç–≤–æ—Ä—é—î gRPC-Web body –¥–ª—è GetRestrictions –∑–∞–ø–∏—Ç—É
 */
export function createGetRestrictionsBody(idInterlocutor: number): Uint8Array {
  const varintBytes = encodeVarint(idInterlocutor);
  const payload = new Uint8Array(1 + varintBytes.length);
  
  // Protobuf —Ç–µ–≥ 0x08 (field 1, varint)
  payload[0] = 0x08;
  payload.set(varintBytes, 1);
  
  // gRPC –∑–∞–≥–æ–ª–æ–≤–æ–∫ (5 –±–∞–π—Ç: 4 –±–∞–π—Ç–∏ –Ω—É–ª—ñ–≤ + —Ä–æ–∑–º—ñ—Ä payload)
  const result = new Uint8Array(5 + payload.length);
  result[4] = payload.length; // –†–æ–∑–º—ñ—Ä payload
  result.set(payload, 5);
  
  return result;
}

/**
 * –ü–∞—Ä—Å–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GetRestrictions API
 */
export function parseGetRestrictionsResponse(response: ArrayBuffer): {
  hasExclusivePosts: boolean;
  categories: string[];
  rawData: Uint8Array;
} {
  const bytes = new Uint8Array(response);
  
  // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ gRPC –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä—à—ñ 5 –±–∞–π—Ç)
  let offset = 5;
  
  const result = {
    hasExclusivePosts: false,
    categories: [] as string[],
    rawData: bytes
  };
  
  // –ü–∞—Ä—Å–∏–º–æ protobuf –ø–æ–ª—è
  while (offset < bytes.length - 20) { // –ó–∞–ª–∏—à–∞—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è grpc-status
    if (offset >= bytes.length) break;
    
    const tag = bytes[offset];
    
    if (tag === 0x08) {
      // VARINT –ø–æ–ª–µ - –ø—Ä–∞–ø–æ—Ä–µ—Ü—å exclusive posts
      const { value } = decodeVarint(bytes, offset + 1);
      result.hasExclusivePosts = value === 1;
      offset += 2; // –¢–µ–≥ + 1 –±–∞–π—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ varint
      
    } else if (tag === 0x12 || tag === 0x1a || tag === 0x22 || tag === 0x2a) {
      // STRING –ø–æ–ª—è - –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
      if (offset + 1 >= bytes.length) break;
      
      const length = bytes[offset + 1];
      if (offset + 2 + length > bytes.length) break;
      
      const categoryBytes = bytes.slice(offset + 2, offset + 2 + length);
      const category = new TextDecoder().decode(categoryBytes);
      
      if (category && !result.categories.includes(category)) {
        result.categories.push(category);
      }
      
      offset += 2 + length;
      
    } else {
      offset++;
    }
  }
  
  return result;
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–ø–∏—Ç –¥–æ –Ω–∞—à–æ–≥–æ –±–µ–∫–µ–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TalkTimes restrictions
 */
export async function checkDialogRestrictions(profileId: number, idInterlocutor: number): Promise<{
  hasExclusivePosts: boolean;
  categories: string[];
  categoryCounts?: Record<string, number>;
  tier?: 'special' | 'specialplus';
  success: boolean;
  error?: string;
}> {
  try {
    // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ apiPost –¥–∏–Ω–∞–º—ñ—á–Ω–æ —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    const { apiPost } = await import('@/lib/api');
    
    const result = await apiPost<{
      hasExclusivePosts?: boolean;
      categories?: string[];
      categoryCounts?: Record<string, number>;
      tier?: 'special' | 'specialplus';
      success?: boolean;
      error?: string;
    }>('/api/chats/tt-restrictions', { profileId, idInterlocutor });
    
    return {
      hasExclusivePosts: result.hasExclusivePosts || false,
      categories: result.categories || [],
      categoryCounts: result.categoryCounts,
      tier: result.tier,
      success: result.success !== false, // true —è–∫—â–æ –Ω–µ false
      error: result.error
    };
    
  } catch (error) {
    console.error('‚ùå Error checking dialog restrictions:', error);
    return {
      hasExclusivePosts: false,
      categories: [],
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * –õ–æ–≥—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–±–º–µ–∂–µ–Ω—å —É –∫–æ–Ω—Å–æ–ª—å
 */
export function logRestrictionsCheck(
  idInterlocutor: number,
  result: { hasExclusivePosts: boolean; categories: string[]; success: boolean; error?: string }
) {
  const timestamp = new Date().toLocaleTimeString();
  
  if (!result.success) {
    console.log(`üö´ [${timestamp}] TalkTimes Restrictions Check FAILED for user ${idInterlocutor}:`);
    console.log(`   Error: ${result.error}`);
    return;
  }
  
  console.log(`‚úÖ [${timestamp}] TalkTimes Restrictions Check SUCCESS for user ${idInterlocutor}:`);
  console.log(`   üé™ Exclusive Posts: ${result.hasExclusivePosts ? '‚ö° ENABLED' : '‚ùå DISABLED'}`);
  console.log(`   üìã Categories: [${result.categories.join(', ')}]`);
  
  if (result.hasExclusivePosts) {
    console.log(`   üéØ This dialog supports EXCLUSIVE POSTS! Lightning icon will be shown.`);
  }
}

"use client";

import React, { useEffect, useState, useRef, useCallback, useLayoutEffect } from 'react';
import { apiPost } from '@/lib/api';

interface EmailAttachment {
  id: string;
  url_thumbnail: string;
  url_original: string;
}

interface EmailMessage {
  id: string;
  id_user_from: string;
  id_user_to: string;
  id_correspondence: string;
  content: string;
  title: string;
  date_created: string;
  date_read: string;
  is_paid: boolean;
  is_sent: string;
  is_deleted: string;
  status: string;
  attachments: {
    images: EmailAttachment[];
    videos: any[];
  };
}

interface EmailHistoryProps {
  isOpen: boolean;
  onClose: () => void;
  profileId: string;
  clientId: string;
  correspondenceId: string;
}

export default function EmailHistory({ isOpen, onClose, profileId, clientId, correspondenceId }: EmailHistoryProps) {
  const [emails, setEmails] = useState<EmailMessage[]>([]);
  const [loading, setLoading] = useState(false);
  const [loadingTop, setLoadingTop] = useState(false);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [fullSizeImage, setFullSizeImage] = useState<{ url: string; alt: string } | null>(null);

  const [previousEmailCount, setPreviousEmailCount] = useState(0);
  const messagesContainerRef = useRef<HTMLDivElement>(null);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  useEffect(() => {
    if (isOpen && correspondenceId) {
      // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –Ω–æ–≤–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É
      setEmails([]);
      setPage(1);
      setHasMore(true);
      setLoadingTop(false);
      setPreviousEmailCount(0); // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É
      loadEmails(1);
    }
  }, [isOpen, correspondenceId]);

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –¥–æ –Ω–∏–∑—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ª–∏—Å—Ç—ñ–≤
  useEffect(() => {
    if (emails.length > 0 && messagesContainerRef.current && !loadingTop) {
      // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –Ω–∏–∑—É –¢–Ü–õ–¨–ö–ò –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ (–∫–æ–ª–∏ –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –ª–∏—Å—Ç—ñ–≤)
      if (previousEmailCount === 0) {
        setTimeout(() => {
          if (messagesContainerRef.current) {
            messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
            console.log('üìç –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –¥–æ –Ω–∏–∑—É –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ');
          }
        }, 100);
      }
    }
  }, [emails.length, loadingTop, previousEmailCount]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è —Å–∫—Ä–æ–ª–∞ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∏—Å—Ç—ñ–≤
  useLayoutEffect(() => {
    if (messagesContainerRef.current && emails.length > previousEmailCount && previousEmailCount > 0) {
      const addedEmails = emails.length - previousEmailCount;
      const container = messagesContainerRef.current;

      console.log(`üìä –î–æ–¥–∞–Ω–æ ${addedEmails} –Ω–æ–≤–∏—Ö –ª–∏—Å—Ç—ñ–≤ (${previousEmailCount} ‚Üí ${emails.length})`);
      console.log(`üìç –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è —Å–∫—Ä–æ–ª–∞: ${container.scrollTop}px`);

      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ—Ä–µ–∫—Ü—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ–∞–∫—Ç–∏—á–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–æ–¥–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
      const estimatedHeightPerEmail = 140; // –±—ñ–ª—å—à —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –≤–∏—Å–æ—Ç–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º padding —ñ margin
      const correction = addedEmails * estimatedHeightPerEmail;

      // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫–æ—Ä–µ–∫—Ü—ñ—é –Ω–µ–≥–∞–π–Ω–æ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
      const currentScrollTop = container.scrollTop;
      const newScrollTop = currentScrollTop + correction;
      container.scrollTop = newScrollTop;

      console.log(`‚ö° –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è: ${currentScrollTop}px + ${correction}px ‚Üí ${newScrollTop}px`);
    }
    setPreviousEmailCount(emails.length);
  }, [emails.length, previousEmailCount]);

  // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ Escape
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && fullSizeImage) {
        setFullSizeImage(null);
      }
    };

    if (fullSizeImage) {
      document.addEventListener('keydown', handleKeyDown);
      return () => document.removeEventListener('keydown', handleKeyDown);
    }
  }, [fullSizeImage]);

  // –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ä—ñ—à–∏—Ö –ª–∏—Å—Ç—ñ–≤ –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ–Ω–≥—É –≤–≥–æ—Ä—É
  const loadOlderEmails = useCallback(async () => {
    if (loadingTop || !hasMore || loading) return;

    const nextPage = page + 1;
    console.log(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ä—ñ—à–∏—Ö –ª–∏—Å—Ç—ñ–≤, —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ${nextPage}`);

    setLoadingTop(true);

    try {
      const response = await apiPost('/api/tt/emails-history', {
        id_user: profileId,
        id_interlocutor: clientId,
        id_correspondence: correspondenceId,
        page: nextPage,
        limit: 10,
        without_translation: false
      });

      if (response.success && response.data?.data?.history) {
        const newEmails = response.data.data.history;
        console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${newEmails.length} –Ω–æ–≤–∏—Ö –ª–∏—Å—Ç—ñ–≤ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ${nextPage}`);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—ñ–≤ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–æ—Ä–µ–∫—Ü—ñ—ó —Å–∫—Ä–æ–ª–∞
        const currentEmailCount = emails.length;

        setEmails(prev => {
          const updatedEmails = [...newEmails, ...prev];
          // –°–æ—Ä—Ç—É—î–º–æ –≤—ñ–¥ —Å—Ç–∞—Ä—ñ—à–∏—Ö –¥–æ –Ω–æ–≤—ñ—à–∏—Ö (—Å—Ç–∞—Ä—ñ—à—ñ –∑–≤–µ—Ä—Ö—É)
          return updatedEmails.sort((a, b) => new Date(a.date_created).getTime() - new Date(b.date_created).getTime());
        });

        console.log(`üìè –î–æ–¥–∞–Ω–æ ${newEmails.length} –Ω–æ–≤–∏—Ö –ª–∏—Å—Ç—ñ–≤, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ä—ñ—à–∏—Ö –¥–æ –Ω–æ–≤—ñ—à–∏—Ö`);

        // –û–Ω–æ–≤–ª—é—î–º–æ page –ª–∏—à–µ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        setPage(nextPage);
        setHasMore(newEmails.length === 10);
      } else {
        console.warn('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ä—ñ—à—ñ –ª–∏—Å—Ç–∏:', response);
        setHasMore(false);
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ä—ñ—à–∏—Ö –ª–∏—Å—Ç—ñ–≤:', error);
      setHasMore(false);
    } finally {
      setLoadingTop(false);
    }
  }, [page, hasMore, loadingTop, loading, profileId, clientId, correspondenceId]);

  // –û–±—Ä–æ–±–∫–∞ —Å–∫—Ä–æ–ª—ñ–Ω–≥—É
  const handleScroll = useCallback(() => {
    if (!messagesContainerRef.current || loadingTop || loading || !hasMore) return;

    const { scrollTop, scrollHeight, clientHeight } = messagesContainerRef.current;
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–∫—Ä—É—Ç–∏–≤ –¥–æ –≤–µ—Ä—Ö—É (–∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º –∑–∞–ø–∞—Å–æ–º)
    if (scrollTop < 50 && scrollHeight > clientHeight) {
      console.log(`üéØ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–∫—Ä—É—Ç–∏–≤ –¥–æ –≤–µ—Ä—Ö—É (${scrollTop}px), –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ä—ñ—à—ñ –ª–∏—Å—Ç–∏`);
      loadOlderEmails();
    }
  }, [loadingTop, loading, hasMore, loadOlderEmails]);

  const loadEmails = async (targetPage: number = 1) => {
    if (!correspondenceId || loading) return;

    setLoading(true);
    try {
      const response = await apiPost('/api/tt/emails-history', {
        id_user: profileId,
        id_interlocutor: clientId,
        id_correspondence: correspondenceId,
        page: targetPage,
        limit: 10,
        without_translation: false
      });

      if (response.success && response.data?.data?.history) {
        const newEmails = response.data.data.history;
        // –°–æ—Ä—Ç—É—î–º–æ –ª–∏—Å—Ç–∏ –≤—ñ–¥ —Å—Ç–∞—Ä—ñ—à–∏—Ö –¥–æ –Ω–æ–≤—ñ—à–∏—Ö (—Å—Ç–∞—Ä—ñ—à—ñ –∑–≤–µ—Ä—Ö—É, –Ω–æ–≤—ñ—à—ñ –∑–Ω–∏–∑—É) –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
        const sortedNewEmails = targetPage === 1
          ? newEmails.sort((a, b) => new Date(a.date_created).getTime() - new Date(b.date_created).getTime())
          : newEmails;

        setEmails(prev => targetPage === 1 ? sortedNewEmails : [...prev, ...sortedNewEmails]);
        setHasMore(newEmails.length === 10);
        if (targetPage === 1) {
          setPage(1); // –°–∫–∏–¥–∞—î–º–æ page –¥–ª—è –Ω–æ–≤–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤
        }
      }
    } catch (error) {
      console.error('Failed to load email history:', error);
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleString('uk-UA', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return dateString;
    }
  };

  if (!isOpen) return null;

  return (
    <React.Fragment>
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[80vh] flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b">
          <h2 className="text-lg font-semibold text-gray-900">üìß –Ü—Å—Ç–æ—Ä—ñ—è –ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Content */}
        <div
          ref={messagesContainerRef}
          className="flex-1 overflow-y-auto p-4"
          onScroll={handleScroll}
        >
          <div>Debug: Component loaded</div>
          {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–≥–æ—Ä—ñ */}
          {loadingTop && (
            <div className="text-center py-4">
              <div className="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
              <span className="ml-2 text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ä—ñ—à–∏—Ö –ª–∏—Å—Ç—ñ–≤...</span>
            </div>
          )}
          {emails.length === 0 && !loading ? (
            <div className="text-center text-gray-500 py-8">
              üì≠ –ù–µ–º–∞—î –ª–∏—Å—Ç—ñ–≤ –≤ —Ü—ñ–π –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—ó
            </div>
          ) : (
            <div className="space-y-4 px-4">
              {emails.map((email) => {
                const isFromProfile = email.id_user_from === profileId;
                return (
                  <div key={email.id} className={isFromProfile ? 'flex justify-end' : 'flex justify-start'}>
                    <div className={isFromProfile
                      ? 'max-w-[80%] p-4 shadow-sm bg-blue-500 text-white rounded-l-lg rounded-tr-lg'
                      : 'max-w-[80%] p-4 shadow-sm bg-gray-100 text-gray-900 rounded-r-lg rounded-tl-lg'
                    }>
                  {/* Email Header */}
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <h3 className={isFromProfile ? 'font-medium mb-1 text-white' : 'font-medium mb-1 text-gray-900'} >
                        {email.title || '–ë–µ–∑ —Ç–µ–º–∏'}
                      </h3>
                      <div className={isFromProfile ? 'flex items-center space-x-4 text-sm text-blue-100' : 'flex items-center space-x-4 text-sm text-gray-600'}>
                        <span>–í—ñ–¥: {email.id_user_from}</span>
                        <span>–î–æ: {email.id_user_to}</span>
                        <span>{formatDate(email.date_created)}</span>
                        {email.is_paid && (
                          <span className={isFromProfile ? 'px-2 py-1 rounded text-xs bg-blue-600 text-blue-100' : 'px-2 py-1 rounded text-xs bg-yellow-100 text-yellow-800'}>
                            üí∞ –ü–ª–∞—Ç–Ω–∏–π
                          </span>
                        )}
                      </div>
                    </div>
                    <div className="text-right">
                      <span className={email.status === 'read'
                        ? (isFromProfile ? 'px-2 py-1 rounded text-xs bg-blue-600 text-blue-100' : 'px-2 py-1 rounded text-xs bg-green-100 text-green-800')
                        : (isFromProfile ? 'px-2 py-1 rounded text-xs bg-blue-600 text-blue-100' : 'px-2 py-1 rounded text-xs bg-blue-100 text-blue-800')
                      }>
                        {email.status === 'read' ? '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ' : '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ'}
                      </span>
                    </div>
                  </div>

                  {/* Email Content */}
                  <div
                    className={isFromProfile ? 'mb-3 prose prose-sm max-w-none prose-invert' : 'mb-3 prose prose-sm max-w-none text-gray-800'}
                    dangerouslySetInnerHTML={{ __html: email.content }}
                  />

                  {/* Attachments */}
                  {email.attachments?.images && email.attachments.images.length > 0 && (
                    <div className={isFromProfile ? 'border-t pt-3 border-blue-400' : 'border-t pt-3 border-gray-200'}>
                      <h4 className={isFromProfile ? 'text-sm font-medium mb-2 text-white' : 'text-sm font-medium mb-2 text-gray-900'}>üìé –í–∫–ª–∞–¥–µ–Ω–Ω—è:</h4>
                      <div className="flex flex-wrap gap-2">
                        {email.attachments.images.map((image) => {
                          // –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π URL –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                          const thumbnailUrl = image.url_thumbnail || image.url_original;
                          const originalUrl = image.url_original || image.url_thumbnail;
                          
                          return (
                            <div key={image.id} className="relative inline-block w-20 h-20 border border-gray-200 rounded overflow-hidden">
                              <img
                                src={thumbnailUrl}
                                alt={`Attachment ${image.id}`}
                                className="w-full h-full object-cover cursor-pointer hover:opacity-80 transition-opacity"
                                style={{ display: 'block' }}
                                onClick={() => setFullSizeImage({ url: originalUrl, alt: `Attachment ${image.id}` })}
                                onError={(e) => {
                                  const target = e.target as HTMLImageElement;
                                  target.style.display = 'none';
                                  target.onerror = null;
                                }}
                              />
                              
                              {/* –ó–µ–ª–µ–Ω–∞ —ñ–∫–æ–Ω–∫–∞ –æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Ñ–æ—Ç–æ */}
                              {image.is_paid && (
                                <div className="absolute bottom-1 right-1">
                                  <svg className="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>
                                    <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd"/>
                              </svg>
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  )}
                </div>
              ))}

              {/* Loading indicator */}
              {loading && (
                <div className="text-center py-4">
                  <div className="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-gray-900"></div>
                  <span className="ml-2 text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
                </div>
              )}

              {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É */}
              {!loadingTop && !hasMore && emails.length > 10 && (
                <div className="text-center py-4">
                  <span className="text-gray-500 text-sm">üìÑ –ë—ñ–ª—å—à–µ –ª–∏—Å—Ç—ñ–≤ –Ω–µ–º–∞—î</span>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>

      {/* –ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π –º–æ–¥–∞–ª –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å */}
      {fullSizeImage && (
        <div className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50" onClick={() => setFullSizeImage(null)}>
          <div className="relative max-w-full max-h-full p-4">
            <img
              src={fullSizeImage.url}
              alt={fullSizeImage.alt}
              className="max-w-full max-h-full object-contain"
              onClick={(e) => e.stopPropagation()}
            />
            <button
              onClick={() => setFullSizeImage(null)}
              className="absolute top-4 right-4 text-white hover:text-gray-300 transition-colors"
            >
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
      )}
    </React.Fragment>
  );
}


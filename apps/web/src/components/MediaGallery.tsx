'use client';

import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { apiGet, apiPost } from '@/lib/api';
import { AudioPlayer } from './AudioPlayer';

export interface PhotoTag {
  code: string;
  description: string;
}

export interface PhotoUrls {
  urlOriginal: string;
  urlPreview: string;
  urlStandard: string;
}

export interface VideoUrls {
  urlMp4Hd: string;
  urlMp4Sd: string;
  urlThumbnail: string;
}

export interface PhotoStatus {
  code: string;
  description: string;
}

export interface Photo {
  idPhoto: number;
  idUser: number;
  status: PhotoStatus;
  tags: PhotoTag[];
  declineReasons: string[];
  comment: string;
  urls: PhotoUrls;
  canDisagree: boolean;
}

export interface Video {
  idVideo: number;
  idUser: number;
  status: PhotoStatus;
  tags: PhotoTag[];
  declineReasons: string[];
  comment: string;
  urls: VideoUrls;
  duration: number;
}

export interface PhotoConnectionStatus {
  idPhoto: number;
  status: 'accessed' | 'sent' | null;
}

export interface VideoConnectionStatus {
  idVideo: number;
  status: 'accessed' | 'sent' | null;
}

export interface AudioUrls {
  mp3: string;
  ogg: string;
}

export interface Audio {
  id: number;
  idUser: number;
  status: string;
  title: string;
  duration: number;
  dateCreated: string;
  dateUpdated: string;
  declineReasons: string[];
  urls: AudioUrls;
}

export interface AudioGalleryResponse {
  cursor: string;
  items: Audio[];
}

export interface AudioConnectionStatus {
  idAudio: number;
  status: 'accessed' | 'sent' | null;
}

interface CachedPhotoData {
  idPhoto: number;
  idProfile: number;
  idUser: number;
  urlPreview: string;
  urlOriginal: string;
  status: 'accessed' | 'sent' | null;
  category: 'regular' | 'special' | 'temporary';
  lastAccessed: number; // timestamp –∫–æ–ª–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–æ—Å—å
  tags: PhotoTag[]; // –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
}

export interface GalleryResponse {
  cursor: string;
  photos: Photo[];
}

export interface VideoGalleryResponse {
  cursor: string;
  videos: Video[];
}

interface MediaGalleryProps {
  profileId: string;
  isOpen: boolean;
  onClose: () => void;
  onPhotoSelect: (photos: Photo[]) => void;
  maxSelection?: number;
  context?: 'chat' | 'profile' | 'other'; // –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –≥–∞–ª–µ—Ä–µ—ó
  idRegularUser?: number; // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç
  // –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è —Ä–µ–∂–∏–º—É –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è (–±–µ–∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±–µ–∫)
  mode?: 'send' | 'attach';
  actionLabel?: string; // –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø—Ü—ñ –¥—ñ—ó
  allowAudio?: boolean; // –ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –Ω–µ –ø–æ–∫–∞–∑—É—î –∞—É–¥—ñ–æ
  allowedPhotoTabs?: Array<'regular' | 'special' | 'special_plus' | 'temporary'>; // –Ø–∫—ñ –≤–∫–ª–∞–¥–∫–∏ —Ñ–æ—Ç–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏
  isSpecialPlusAllowed?: boolean; // –ö–µ—Ä—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º –¥–æ special_plus
  onAttach?: (payload: { photos: Photo[]; videos: Video[] }) => void; // –ö–æ–ª–±–µ–∫ –¥–ª—è —Ä–µ–∂–∏–º—É attach
}

export function MediaGallery({ 
  profileId, 
  isOpen, 
  onClose, 
  onPhotoSelect, 
  maxSelection = 6,
  context = 'other',
  idRegularUser,
  mode = 'send',
  actionLabel,
  allowAudio = true,
  allowedPhotoTabs,
  isSpecialPlusAllowed = true,
  onAttach
}: MediaGalleryProps) {
  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è props
  if (!profileId || isNaN(parseInt(profileId))) {
    throw new Error('MediaGallery: profileId must be a valid number string');
  }
  
  if (context === 'chat' && !idRegularUser) {
    console.warn('MediaGallery: idRegularUser is required when context is "chat"');
  }
  const [photos, setPhotos] = useState<Photo[]>([]);
  const [videos, setVideos] = useState<Video[]>([]);
  const [selectedPhotos, setSelectedPhotos] = useState<Photo[]>([]);
  const [selectedVideos, setSelectedVideos] = useState<Video[]>([]);
  const [audios, setAudios] = useState<Audio[]>([]);
  const [selectedAudios, setSelectedAudios] = useState<Audio[]>([]);
  const [loading, setLoading] = useState(false);
  const [regularCursor, setRegularCursor] = useState('');
  const [temporaryCursor, setTemporaryCursor] = useState('');
  const [videoCursor, setVideoCursor] = useState('');
  const [audioCursor, setAudioCursor] = useState('');
  const [hasMore, setHasMore] = useState(true);
  const [hasMoreVideos, setHasMoreVideos] = useState(true);
  const [hasMoreAudios, setHasMoreAudios] = useState(true);

  const [photoType, setPhotoType] = useState<'regular' | 'special' | 'special_plus' | 'temporary'>(mode === 'attach' ? 'special' : 'regular');
  const [activeTab, setActiveTab] = useState<'regular' | 'special' | 'special_plus' | 'temporary'>(mode === 'attach' ? 'special' : 'regular');
  const [mediaType, setMediaType] = useState<'photo' | 'video' | 'audio'>('photo');
  
  const [fullSizePhoto, setFullSizePhoto] = useState<Photo | null>(null);
  const [fullSizeVideo, setFullSizeVideo] = useState<Video | null>(null);
  const [photoStatuses, setPhotoStatuses] = useState<Map<number, 'accessed' | 'sent' | null>>(new Map());
  const [videoStatuses, setVideoStatuses] = useState<Map<number, 'accessed' | 'sent' | null>>(new Map());
  const [audioStatuses, setAudioStatuses] = useState<Map<number, 'accessed' | 'sent' | null>>(new Map());
  const [statusFilter, setStatusFilter] = useState<'all' | 'available' | 'accessed' | 'sent'>('all');
  const [statusRequestedPhotos, setStatusRequestedPhotos] = useState<Set<number>>(new Set()); // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —Å—Ç–∞—Ç—É—Å—ñ–≤
  const [statusRequestedVideos, setStatusRequestedVideos] = useState<Set<number>>(new Set()); // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —Å—Ç–∞—Ç—É—Å—ñ–≤ –≤—ñ–¥–µ–æ
  const [statusRequestedAudios, setStatusRequestedAudios] = useState<Set<number>>(new Set()); // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∞—É–¥—ñ–æ
  const [temporaryPhotoIds, setTemporaryPhotoIds] = useState<Set<number>>(new Set()); // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è temporary —Ñ–æ—Ç–æ
  
  // –°—Ç–∞–Ω –¥–ª—è –∞—É–¥—ñ–æ –ø–ª–µ—î—Ä–∞
  const [currentPlayingAudio, setCurrentPlayingAudio] = useState<Audio | null>(null);
  const audioPlayersRef = useRef<Map<number, HTMLAudioElement>>(new Map());
  const [autoLoadAttempts, setAutoLoadAttempts] = useState(0); // –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–± –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

  // –ö–µ—à —Ñ—É–Ω–∫—Ü—ñ—ó
  const UNIFIED_PHOTO_CACHE_KEY = `gallery_unified_photos_${profileId}`;
  const FILTER_CACHE_KEY = `gallery_filters_${profileId}`;
  const CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 –≥–æ–¥–∏–Ω–∏

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —î–¥–∏–Ω–∏–º –∫–µ—à–µ–º —Ñ–æ—Ç–æ
  const loadUnifiedPhotoCache = useCallback((): Map<number, CachedPhotoData> => {
    try {
      const cachedData = localStorage.getItem(UNIFIED_PHOTO_CACHE_KEY);
      if (!cachedData) return new Map();

      const parsedData = JSON.parse(cachedData) as Record<string, CachedPhotoData>;
      const now = Date.now();
      const validData = new Map<number, CachedPhotoData>();

      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –¥–∞–Ω—ñ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ lastAccessed
      Object.entries(parsedData).forEach(([idPhoto, photoData]) => {
        const age = now - photoData.lastAccessed;
        if (age <= CACHE_DURATION) {
          // –û–Ω–æ–≤–ª—é—î–º–æ lastAccessed –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ)
          validData.set(parseInt(idPhoto), {
            ...photoData,
            lastAccessed: now
          });
        }
      });

      // –ü–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É
      // if (process.env.NODE_ENV === 'development' && validData.size > 0) {
      //   console.log('üì¶ Loaded from unified cache:', validData.size, 'photos');
      // }
      return validData;
    } catch (error) {
      console.warn('Failed to load unified photo cache:', error);
      return new Map();
    }
  }, [UNIFIED_PHOTO_CACHE_KEY, CACHE_DURATION]);

  // Debounced save function –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  const debouncedSave = useRef<NodeJS.Timeout | null>(null);
  
  const saveUnifiedPhotoCache = useCallback((cacheMap: Map<number, CachedPhotoData>) => {
    // –°–∫–∞—Å–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    if (debouncedSave.current) {
      clearTimeout(debouncedSave.current);
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä –Ω–∞ 500–º—Å
    debouncedSave.current = setTimeout(() => {
      try {
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Map –≤ –æ–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        const cacheObject = Object.fromEntries(cacheMap);
        localStorage.setItem(UNIFIED_PHOTO_CACHE_KEY, JSON.stringify(cacheObject));
        // –ü–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–µ—à—É
        // if (process.env.NODE_ENV === 'development' && cacheMap.size > 1000) {
        //   console.log('üì¶ Unified cache saved:', cacheMap.size, 'photos');
        // }
      } catch (error) {
        console.warn('Failed to save unified photo cache:', error);
      }
    }, 500);
  }, [UNIFIED_PHOTO_CACHE_KEY]);

  // Cleanup debounced save on unmount
  useEffect(() => {
    return () => {
      console.log('üßπ MediaGallery unmounting, cleaning up resources...');
      
      // –û—á–∏—â—É—î–º–æ debounced save
      if (debouncedSave.current) {
        clearTimeout(debouncedSave.current);
        debouncedSave.current = null;
      }
    };
  }, []);

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ special —Ç–µ–≥—ñ–≤
  const hasTag = useCallback((photo: Photo, code: string) => photo.tags?.some(tag => tag.code === code) ?? false, []);
  const isSpecialPhoto = useCallback((photo: Photo) => hasTag(photo, 'special') || hasTag(photo, 'special_plus'), [hasTag]);
  const isSpecialPlusPhoto = useCallback((photo: Photo) => hasTag(photo, 'special_plus'), [hasTag]);
  const isSpecialExactPhoto = useCallback((photo: Photo) => hasTag(photo, 'special') && !hasTag(photo, 'special_plus'), [hasTag]);

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ temporary —Ñ–æ—Ç–æ
  const isTemporaryPhoto = useCallback((photo: Photo) => {
    // Temporary —Ñ–æ—Ç–æ - —Ü–µ —Ç—ñ —â–æ –ø—Ä–∏–π—à–ª–∏ –∑ –∑–∞–ø–∏—Ç—É isTemporary=true
    return temporaryPhotoIds.has(photo.idPhoto);
  }, [temporaryPhotoIds]);

  const addPhotosToUnifiedCache = useCallback((photos: Photo[], isTemporary: boolean = false) => {
    try {
      const cacheMap = loadUnifiedPhotoCache();
      const now = Date.now();
      let newCount = 0;

      photos.forEach(photo => {
        if (!cacheMap.has(photo.idPhoto)) {
          // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ñ–æ—Ç–æ
          let category: 'regular' | 'special' | 'temporary' = 'regular';
          if (isTemporary) {
            category = 'temporary';
          } else if (isSpecialPhoto(photo)) {
            category = 'special';
          }

          cacheMap.set(photo.idPhoto, {
            idPhoto: photo.idPhoto,
            idProfile: parseInt(profileId),
            idUser: photo.idUser,
            urlPreview: photo.urls.urlPreview,
            urlOriginal: photo.urls.urlOriginal,
            status: null, // –ë—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ
            category,
            lastAccessed: now,
            tags: photo.tags
          });
          newCount++;
        } else {
          // –û–Ω–æ–≤–ª—é—î–º–æ lastAccessed –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–æ—Ç–æ
          const existing = cacheMap.get(photo.idPhoto)!;
          cacheMap.set(photo.idPhoto, {
            ...existing,
            lastAccessed: now
          });
        }
      });

      if (newCount > 0) {
        saveUnifiedPhotoCache(cacheMap);
        console.log('üì¶ Added to unified cache:', newCount, 'new photos, total:', cacheMap.size);
      }

      return cacheMap;
    } catch (error) {
      console.warn('Failed to add photos to unified cache:', error);
      return loadUnifiedPhotoCache();
    }
  }, [loadUnifiedPhotoCache, saveUnifiedPhotoCache, profileId, isSpecialPhoto]);

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∏–π –∫–µ—à –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const [cachedPhotoMap, setCachedPhotoMap] = useState<Map<number, CachedPhotoData> | null>(null);
  
  const getCachedPhotoMap = useCallback(() => {
    if (!cachedPhotoMap) {
      const loaded = loadUnifiedPhotoCache();
      setCachedPhotoMap(loaded);
      return loaded;
    }
    return cachedPhotoMap;
  }, [cachedPhotoMap, loadUnifiedPhotoCache]);

  const updatePhotoStatusesInCache = useCallback((statuses: Map<number, 'accessed' | 'sent' | null>) => {
    try {
      const cacheMap = getCachedPhotoMap(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∏–π –∫–µ—à
      const now = Date.now();
      let updatedCount = 0;

      statuses.forEach((status, idPhoto) => {
        if (cacheMap.has(idPhoto)) {
          const existing = cacheMap.get(idPhoto)!;
          cacheMap.set(idPhoto, {
            ...existing,
            status,
            lastAccessed: now // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É
          });
          updatedCount++;
        }
      });

      if (updatedCount > 0) {
        setCachedPhotoMap(new Map(cacheMap)); // –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∏–π —Å—Ç–µ–π—Ç
        saveUnifiedPhotoCache(cacheMap); // Debounced –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      }

      return cacheMap;
    } catch (error) {
      console.warn('Failed to update photo statuses in unified cache:', error);
      return getCachedPhotoMap();
    }
  }, [getCachedPhotoMap, saveUnifiedPhotoCache, setCachedPhotoMap]);

  // –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ñ–æ—Ç–æ
  const filterPhotosByTypeAndStatus = useCallback((
    photos: Photo[], 
    photoType: 'regular' | 'special' | 'special_plus' | 'temporary', 
    statusFilter: 'all' | 'available' | 'accessed' | 'sent',
    context: string
  ): Photo[] => {
    let filtered = photos;

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ç–∏–ø–æ–º (—Ç—ñ–ª—å–∫–∏ –≤ —á–∞—Ç—ñ)
    if (context === 'chat') {
      switch (photoType) {
        case 'regular':
          filtered = photos.filter(photo => !isSpecialPhoto(photo) && !isTemporaryPhoto(photo));
          break;
        case 'special':
          // –õ–∏—à–µ —Ç–æ—á–Ω—ñ special (–±–µ–∑ special_plus)
          filtered = photos.filter(photo => isSpecialExactPhoto(photo));
          break;
        case 'special_plus':
          filtered = photos.filter(photo => isSpecialPlusPhoto(photo));
          break;
        case 'temporary':
          // –¢–∏–º—á–∞—Å–æ–≤—ñ —Ñ–æ—Ç–æ - —Ç—ñ–ª—å–∫–∏ —Ç—ñ —â–æ temporary –∞–ª–µ –ù–ï special
          filtered = photos.filter(photo => isTemporaryPhoto(photo) && !isSpecialPhoto(photo));
          break;
        default:
          filtered = photos;
      }
    }

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
    if (statusFilter !== 'all') {
      filtered = filtered.filter(photo => {
        const status = photoStatuses.get(photo.idPhoto);
        switch (statusFilter) {
          case 'available':
            return status === null || typeof status === 'undefined';
          case 'accessed':
            return status === 'accessed'; // –¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ
          case 'sent':
            return status === 'sent'; // –¢—ñ–ª—å–∫–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ
          default:
            return true;
        }
      });
    }

    return filtered;
  }, [isSpecialPhoto, isTemporaryPhoto, photoStatuses]);

  // –§—É–Ω–∫—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
  const filterVideosByStatus = useCallback((
    videos: Video[], 
    statusFilter: 'all' | 'available' | 'accessed' | 'sent'
  ): Video[] => {
    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
    if (statusFilter !== 'all') {
      return videos.filter(video => {
        const status = videoStatuses.get(video.idVideo);
        switch (statusFilter) {
          case 'available':
            return status === null || typeof status === 'undefined';
          case 'accessed':
            return status === 'accessed'; // –¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ
          case 'sent':
            return status === 'sent'; // –¢—ñ–ª—å–∫–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ
          default:
            return true;
        }
      });
    }

    return videos;
  }, [videoStatuses]);

  const convertCacheToPhotos = useCallback((cacheMap: Map<number, CachedPhotoData>): Photo[] => {
    return Array.from(cacheMap.values()).map(cached => ({
      idPhoto: cached.idPhoto,
      idUser: cached.idUser,
      urls: {
        urlPreview: cached.urlPreview,
        urlOriginal: cached.urlOriginal,
        urlStandard: cached.urlPreview // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ preview —è–∫ standard
      },
      tags: cached.tags,
      comment: '', // –ù–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à—ñ
      canDisagree: false, // –ù–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à—ñ
      status: { code: '', description: '' }, // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ status
      declineReasons: [] // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ declineReasons
    })).sort((a, b) => b.idPhoto - a.idPhoto);
  }, []);





  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ activeTab –∑ photoType
  useEffect(() => {
    setPhotoType(activeTab);
    // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–± –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–¥—ñ–ª—É
    setAutoLoadAttempts(0);
  }, [activeTab]);

  // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–± –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤
  useEffect(() => {
    setAutoLoadAttempts(0);
  }, [statusFilter]);

  // –ó–∞–≤–∂–¥–∏ –∞–∫—Ç–∏–≤—É—î–º–æ –ø–µ—Ä—à—É –¥–æ–∑–≤–æ–ª–µ–Ω—É –≤–∫–ª–∞–¥–∫—É –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ (—ñ–≥–Ω–æ—Ä—É—î–º–æ –∫–µ—à –¥–ª—è photoType)
  useEffect(() => {
    if (isOpen) {
      let initial: 'regular' | 'special' | 'special_plus' | 'temporary' = 'regular';
      if (mode === 'attach') {
        // –î–ª—è attach –≤—ñ–¥–¥–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç special
        if (!allowedPhotoTabs || allowedPhotoTabs.includes('special')) initial = 'special';
        else if (allowedPhotoTabs.includes('special_plus')) initial = 'special_plus';
        else if (allowedPhotoTabs.includes('regular')) initial = 'regular';
        else if (allowedPhotoTabs.includes('temporary')) initial = 'temporary';
      } else {
        // –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É: –ø–µ—Ä—à–∞ –∑ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö
        if (allowedPhotoTabs && allowedPhotoTabs.length > 0) initial = allowedPhotoTabs[0];
        else initial = 'regular';
      }
      setActiveTab(initial);
      setPhotoType(initial);
      // —Å—Ç–∞—Ç—É—Å-—Ñ—ñ–ª—å—Ç—Ä –º–æ–∂–µ–º–æ –±—Ä–∞—Ç–∏ –∑ –∫–µ—à—É —è–∫ —ñ —Ä–∞–Ω—ñ—à–µ
      try {
        const cachedFilters = localStorage.getItem(`gallery_filters_${profileId}`);
        if (cachedFilters) {
          const filters = JSON.parse(cachedFilters);
          if (filters.statusFilter) setStatusFilter(filters.statusFilter);
        }
      } catch (e) {
        // ignore
      }
    }
  }, [isOpen, mode, allowedPhotoTabs, profileId]);

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –≤ –∫–µ—à –ø—Ä–∏ –∑–º—ñ–Ω—ñ
  useEffect(() => {
    if (isOpen) {
      const timeoutId = setTimeout(() => {
        try {
          const filtersToSave = { photoType, statusFilter };
          localStorage.setItem(`gallery_filters_${profileId}`, JSON.stringify(filtersToSave));
          console.log('üíæ Filters saved to cache:', filtersToSave);
        } catch (error) {
          console.warn('Failed to save filters to cache:', error);
        }
      }, 200); // –ó–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

      return () => clearTimeout(timeoutId);
    }
  }, [photoType, statusFilter, isOpen]);

  const [error, setError] = useState<string | null>(null);
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const hasMoreRef = useRef(hasMore);
  const regularCursorRef = useRef(regularCursor);
  const temporaryCursorRef = useRef(temporaryCursor);
  const loadPhotosRef = useRef<((reset?: boolean) => Promise<void>) | null>(null);

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ ref –∑ state
  useEffect(() => {
    hasMoreRef.current = hasMore;
    regularCursorRef.current = regularCursor;
    temporaryCursorRef.current = temporaryCursor;
  }, [hasMore, regularCursor, temporaryCursor]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –≤—ñ–¥–µ–æ –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º (–±–∞—Ç—á–∞–º–∏ –ø–æ 100)
  const loadVideoStatuses = useCallback(async (videos: Video[], idUser: number) => {
    if (videos.length === 0) return;

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –≤—ñ–¥–µ–æ, –¥–ª—è —è–∫–∏—Ö —â–µ –Ω–µ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ —Å—Ç–∞—Ç—É—Å–∏
    const videosToRequest = videos.filter(video => !statusRequestedVideos.has(video.idVideo));
    
    if (videosToRequest.length === 0) {
      return;
    }

    // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –±–∞—Ç—á—ñ –ø–æ 100 –≤—ñ–¥–µ–æ
    const batchSize = 100;
    const batches = [];
    for (let i = 0; i < videosToRequest.length; i += batchSize) {
      batches.push(videosToRequest.slice(i, i + batchSize));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –±–∞—Ç—á
    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
      const batch = batches[batchIndex];

      try {
        const idsVideos = batch.map(v => v.idVideo);
        
        // –í—ñ–¥–º—ñ—á–∞—î–º–æ —â–æ –¥–ª—è —Ü–∏—Ö –≤—ñ–¥–µ–æ –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
        setStatusRequestedVideos(prev => {
          const newSet = new Set(prev);
          idsVideos.forEach(id => newSet.add(id));
          return newSet;
        });

        const response = await apiPost('/api/gallery/video-statuses', {
          idUser,
          idsVideos,
          profileId: parseInt(profileId)
        });

        const typedResponse = response as { success: boolean; data?: { videos: VideoConnectionStatus[] }; error?: string };
        if (typedResponse.success && typedResponse.data?.videos) {
          setVideoStatuses(prev => {
            const newStatusMap = new Map(prev);
            typedResponse.data!.videos.forEach((videoStatus: VideoConnectionStatus) => {
              newStatusMap.set(videoStatus.idVideo, videoStatus.status);
            });
            
            return newStatusMap;
          });
        } else {
          // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ - –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç–∞–Ω–∏—Ö, —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
          setStatusRequestedVideos(prev => {
            const newSet = new Set(prev);
            batch.forEach(video => newSet.delete(video.idVideo));
            return newSet;
          });
        }
      } catch (error) {
        // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ - –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç–∞–Ω–∏—Ö, —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
        setStatusRequestedVideos(prev => {
          const newSet = new Set(prev);
          batch.forEach(video => newSet.delete(video.idVideo));
          return newSet;
        });
      }

      // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –±–∞—Ç—á–∞–º–∏ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ API
      if (batchIndex < batches.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
  }, [profileId, statusRequestedVideos]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ —Ñ–æ—Ç–æ –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º (–±–∞—Ç—á–∞–º–∏ –ø–æ 100)
  const loadPhotoStatuses = useCallback(async (photos: Photo[], idUser: number) => {
    if (photos.length === 0) return;

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ —Ñ–æ—Ç–æ, –¥–ª—è —è–∫–∏—Ö —â–µ –Ω–µ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ —Å—Ç–∞—Ç—É—Å–∏
    const photosToRequest = photos.filter(photo => !statusRequestedPhotos.has(photo.idPhoto));
    
    if (photosToRequest.length === 0) {
      console.log('üìä All photo statuses already requested');
      return;
    }

    console.log(`üìä Requesting statuses for ${photosToRequest.length} photos (${photos.length} total, ${photos.length - photosToRequest.length} already requested)`);

    // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –±–∞—Ç—á—ñ –ø–æ 100 —Ñ–æ—Ç–æ
    const batchSize = 100;
    const batches = [];
    for (let i = 0; i < photosToRequest.length; i += batchSize) {
      batches.push(photosToRequest.slice(i, i + batchSize));
    }

    // –ü–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –±–∞—Ç—á—ñ–≤
    // if (process.env.NODE_ENV === 'development' && batches.length > 5) {
    //   console.log(`üìä Processing ${batches.length} batches of photo statuses`);
    // }

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –±–∞—Ç—á
    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
      const batch = batches[batchIndex];
      
      // –ü–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö –±–∞—Ç—á—ñ–≤
      // if (process.env.NODE_ENV === 'development' && (batchIndex + 1) % 5 === 0) {
      //   console.log(`üìä Processing batch ${batchIndex + 1}/${batches.length} with ${batch.length} photos`);
      // }

      try {
        const idsPhotos = batch.map(p => p.idPhoto);
        
        // –í—ñ–¥–º—ñ—á–∞—î–º–æ —â–æ –¥–ª—è —Ü–∏—Ö —Ñ–æ—Ç–æ –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
        setStatusRequestedPhotos(prev => {
          const newSet = new Set(prev);
          idsPhotos.forEach(id => newSet.add(id));
          return newSet;
        });

        const response = await apiPost('/api/gallery/photo-statuses', {
          idUser,
          idsPhotos,
          profileId: parseInt(profileId)
        });

        const typedResponse = response as { success: boolean; data?: { photos: PhotoConnectionStatus[] }; error?: string };
        if (typedResponse.success && typedResponse.data?.photos) {
          // –ü–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –±–∞—Ç—á—ñ–≤
          // if (process.env.NODE_ENV === 'development' && ((batchIndex + 1) % 10 === 0 || batchIndex === batches.length - 1)) {
          //   console.log(`üìä Batch ${batchIndex + 1}: Received statuses for ${typedResponse.data.photos.length} photos`);
          // }
          setPhotoStatuses(prev => {
            const newStatusMap = new Map(prev);
            typedResponse.data!.photos.forEach((photoStatus: PhotoConnectionStatus) => {
              newStatusMap.set(photoStatus.idPhoto, photoStatus.status);
            });
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏ –≤ —î–¥–∏–Ω–∏–π –∫–µ—à
            updatePhotoStatusesInCache(newStatusMap);
            
            return newStatusMap;
          });
        } else {
          console.error(`‚ùå Batch ${batchIndex + 1}: Failed to load photo statuses:`, typedResponse.error);
          
          // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ - –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç–∞–Ω–∏—Ö, —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
          setStatusRequestedPhotos(prev => {
            const newSet = new Set(prev);
            batch.forEach(photo => newSet.delete(photo.idPhoto));
            return newSet;
          });
        }
      } catch (error) {
        console.error(`‚ùå Batch ${batchIndex + 1}: Error loading photo statuses:`, error);
        
        // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ - –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç–∞–Ω–∏—Ö, —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
        setStatusRequestedPhotos(prev => {
          const newSet = new Set(prev);
          batch.forEach(photo => newSet.delete(photo.idPhoto));
          return newSet;
        });
      }

      // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –±–∞—Ç—á–∞–º–∏ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ API
      if (batchIndex < batches.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
  }, [profileId, statusRequestedPhotos]);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
  const ensureAllStatusesLoaded = useCallback(async () => {
    if (!idRegularUser || context !== 'chat' || photos.length === 0) return;

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ–æ—Ç–æ –±–µ–∑ —Å—Ç–∞—Ç—É—Å—ñ–≤
    const photosWithoutStatuses = photos.filter(photo => 
      !photoStatuses.has(photo.idPhoto) && !statusRequestedPhotos.has(photo.idPhoto)
    );

    if (photosWithoutStatuses.length > 0) {
      console.log(`üîç Found ${photosWithoutStatuses.length} photos without statuses, requesting...`);
      await loadPhotoStatuses(photosWithoutStatuses, idRegularUser);
    }
  }, [photos, photoStatuses, statusRequestedPhotos, idRegularUser, context, loadPhotoStatuses]);

  // –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
  useEffect(() => {
    if (isOpen && photos.length > 0 && context === 'chat') {
      const timeoutId = setTimeout(() => {
        ensureAllStatusesLoaded();
      }, 2000); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ

      return () => clearTimeout(timeoutId);
    }
  }, [isOpen, photos.length, context, ensureAllStatusesLoaded]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
  const loadVideos = useCallback(async (reset: boolean = false) => {
    if (loading) return;

    setLoading(true);
    setError(null);

    try {
      const cursor = reset ? '' : videoCursor;
      const response = await apiGet(`/api/gallery/${profileId}/videos`, {
        cursor,
        limit: '100',
        statuses: 'approved'
      });

      const typedResponse = response as { success: boolean; data?: VideoGalleryResponse; error?: string };
      if (typedResponse.success && typedResponse.data) {
        const videoData = typedResponse.data;
        
        if (reset) {
          setVideos(videoData.videos);
        } else {
          setVideos(prev => {
            const existingIds = new Set(prev.map(v => v.idVideo));
            const newVideos = videoData.videos.filter(video => !existingIds.has(video.idVideo));
            return [...prev, ...newVideos].sort((a, b) => b.idVideo - a.idVideo);
          });
        }
        
        setVideoCursor(videoData.cursor);
        setHasMoreVideos(videoData.videos.length >= 100);
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –¥–ª—è –≤—ñ–¥–µ–æ —è–∫—â–æ —î idRegularUser
        if (idRegularUser && context === 'chat') {
          const videosToLoad = reset ? videoData.videos : videoData.videos.filter(video => {
            const existingIds = new Set(videos.map(v => v.idVideo));
            return !existingIds.has(video.idVideo);
          });
          if (videosToLoad.length > 0) {
            loadVideoStatuses(videosToLoad, idRegularUser);
          }
        }
      } else {
        setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ');
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ');
    } finally {
      setLoading(false);
    }
  }, [profileId, loading, videoCursor, videos, idRegularUser, context, loadVideoStatuses]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
  const loadAudios = useCallback(async (reset: boolean = false) => {
    if (loading) return;

    setLoading(true);
    setError(null);

    try {
      const response = await apiGet(`/api/gallery/${profileId}/audios`, {
        cursor: reset ? '' : audioCursor,
        limit: '50'
      });

      const typedResponse = response as { success: boolean; data?: AudioGalleryResponse; error?: string };
      if (typedResponse.success && typedResponse.data) {
        const audioData = typedResponse.data;
        
        if (reset) {
          setAudios(audioData.items);
        } else {
          setAudios(prev => {
            const existingIds = new Set(prev.map(a => a.id));
            const newAudios = audioData.items.filter(audio => !existingIds.has(audio.id));
            return [...prev, ...newAudios].sort((a, b) => b.id - a.id);
          });
        }
        
        setAudioCursor(audioData.cursor);
        setHasMoreAudios(audioData.items.length >= 50);
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –¥–ª—è –∞—É–¥—ñ–æ —è–∫—â–æ —î idRegularUser
        if (idRegularUser && context === 'chat') {
          const audiosToLoad = reset ? audioData.items : audioData.items.filter(audio => {
            const existingIds = new Set(audios.map(a => a.id));
            return !existingIds.has(audio.id);
          });
          if (audiosToLoad.length > 0) {
            loadAudioStatuses(audiosToLoad, idRegularUser);
          }
        }
      } else {
        setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ');
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ');
    } finally {
      setLoading(false);
    }
  }, [profileId, loading, audioCursor, audios, idRegularUser, context]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º (–±–∞—Ç—á–∞–º–∏ –ø–æ 100)
  const loadAudioStatuses = useCallback(async (audios: Audio[], idUser: number) => {
    if (audios.length === 0) return;

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –∞—É–¥—ñ–æ, –¥–ª—è —è–∫–∏—Ö —â–µ –Ω–µ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ —Å—Ç–∞—Ç—É—Å–∏
    const audiosToRequest = audios.filter(audio => !statusRequestedAudios.has(audio.id));
    
    if (audiosToRequest.length === 0) {
      return;
    }

    // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –±–∞—Ç—á—ñ –ø–æ 100 –∞—É–¥—ñ–æ
    const batchSize = 100;
    const batches = [];
    for (let i = 0; i < audiosToRequest.length; i += batchSize) {
      batches.push(audiosToRequest.slice(i, i + batchSize));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –±–∞—Ç—á
    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
      const batch = batches[batchIndex];

      try {
        const idsAudios = batch.map(a => a.id);
        
        // –í—ñ–¥–º—ñ—á–∞—î–º–æ —â–æ –¥–ª—è —Ü–∏—Ö –∞—É–¥—ñ–æ –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
        setStatusRequestedAudios(prev => {
          const newSet = new Set(prev);
          idsAudios.forEach(id => newSet.add(id));
          return newSet;
        });

        const response = await apiPost('/api/gallery/audio-statuses', {
          idUser,
          idsAudios,
          profileId: parseInt(profileId)
        });

        const typedResponse = response as { success: boolean; data?: { audios: AudioConnectionStatus[] }; error?: string };
        if (typedResponse.success && typedResponse.data?.audios) {
          setAudioStatuses(prev => {
            const newStatusMap = new Map(prev);
            typedResponse.data!.audios.forEach((audioStatus: AudioConnectionStatus) => {
              newStatusMap.set(audioStatus.idAudio, audioStatus.status);
            });
            
            return newStatusMap;
          });
        } else {
          // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ - –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç–∞–Ω–∏—Ö, —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
          setStatusRequestedAudios(prev => {
            const newSet = new Set(prev);
            batch.forEach(audio => newSet.delete(audio.id));
            return newSet;
          });
        }
      } catch (error) {
        // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ - –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç–∞–Ω–∏—Ö, —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
        setStatusRequestedAudios(prev => {
          const newSet = new Set(prev);
          batch.forEach(audio => newSet.delete(audio.id));
          return newSet;
        });
      }

      // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –±–∞—Ç—á–∞–º–∏ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ API
      if (batchIndex < batches.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
  }, [profileId, statusRequestedAudios]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä—à–∏—Ö 500 —Ñ–æ—Ç–æ –∑ –ø–æ–∫–∞–∑–æ–º –æ–¥—Ä–∞–∑—É
  const loadInitialPhotos = useCallback(async () => {
    if (loading) return;

    // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —î–¥–∏–Ω–æ–≥–æ –∫–µ—à—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ–∫–∞–∑—É
    const cacheMap = loadUnifiedPhotoCache();
    if (cacheMap.size > 0) {
      const cachedPhotos = convertCacheToPhotos(cacheMap);
      console.log('üì¶ Showing cached photos first:', cachedPhotos.length);
      setPhotos(cachedPhotos);
      
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ temporary —Ñ–æ—Ç–æ –∑ –∫–µ—à—É
      const tempIds = new Set<number>();
      const statusMap = new Map<number, 'accessed' | 'sent' | null>();
      
      cacheMap.forEach((cached, idPhoto) => {
        if (cached.category === 'temporary') {
          tempIds.add(idPhoto);
        }
        if (cached.status) {
          statusMap.set(idPhoto, cached.status);
        }
      });
      
      setTemporaryPhotoIds(tempIds);
      setPhotoStatuses(statusMap);
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ —Å—Ç–∞—Ç—É—Å–∏ –¥–ª—è –≤–∏–¥–∏–º–∏—Ö —Ñ–æ—Ç–æ (–∑–∞–≤–∂–¥–∏ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ)
      if (idRegularUser && context === 'chat') {
        await loadPhotoStatuses(cachedPhotos, idRegularUser);
      }
    }

    setLoading(true);
    setError(null);

    try {
      const allPhotos: Photo[] = [];
      let regularCursor = '';
      let temporaryCursor = '';
      let hasMoreRegular = true;
      let hasMoreTemporary = true;
      let isFirstBatch = true;
      const maxInitialPhotos = 500; // –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –ø–æ–µ—Ç–∞–ø–Ω–æ –¥–æ 500 —à—Ç—É–∫
      while ((hasMoreRegular || hasMoreTemporary) && allPhotos.length < maxInitialPhotos) {
        const requests = [];
        
        // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ñ–æ—Ç–æ —è–∫—â–æ —î —â–µ –¥–∞–Ω—ñ
        if (hasMoreRegular) {
          requests.push(
            apiGet(`/api/gallery/${profileId}/photos`, {
              cursor: regularCursor,
              limit: '100',
              statuses: 'approved,approved_by_ai'
            })
          );
        }
        
        // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è temporary —Ñ–æ—Ç–æ —è–∫—â–æ —î —â–µ –¥–∞–Ω—ñ
        if (hasMoreTemporary) {
          console.log('üì∏ Requesting temporary photos with cursor:', temporaryCursor);
          requests.push(
            apiGet(`/api/gallery/${profileId}/photos`, {
              cursor: temporaryCursor,
              limit: '100',
              isTemporary: 'true'
            })
          );
        }

        const responses = await Promise.all(requests);
        let regularResponse = null;
        let temporaryResponse = null;

        // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (hasMoreRegular && hasMoreTemporary) {
          [regularResponse, temporaryResponse] = responses;
        } else if (hasMoreRegular) {
          [regularResponse] = responses;
        } else if (hasMoreTemporary) {
          [temporaryResponse] = responses;
        }

        const newPhotos: Photo[] = [];

        // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const typedRegularResponse = regularResponse as { success: boolean; data?: GalleryResponse; error?: string };
        if (regularResponse && typedRegularResponse.success) {
          const regularData = typedRegularResponse.data as GalleryResponse;
          console.log('üì∏ Regular photos batch:', regularData.photos.length);
          newPhotos.push(...regularData.photos);
          regularCursor = regularData.cursor;
          hasMoreRegular = regularData.photos.length >= 100;
        } else if (regularResponse) {
          hasMoreRegular = false;
        }

        const typedTemporaryResponse = temporaryResponse as { success: boolean; data?: GalleryResponse; error?: string };
        if (temporaryResponse && typedTemporaryResponse.success) {
          const temporaryData = typedTemporaryResponse.data as GalleryResponse;
          console.log('üì∏ Temporary photos batch:', temporaryData.photos.length, temporaryData.photos.map(p => p.idPhoto));
          newPhotos.push(...temporaryData.photos);
          
          // –í—ñ–¥–º—ñ—á–∞—î–º–æ —Ü—ñ —Ñ–æ—Ç–æ —è–∫ temporary
          setTemporaryPhotoIds(prev => {
            const newSet = new Set(prev);
            temporaryData.photos.forEach(photo => newSet.add(photo.idPhoto));
            return newSet;
          });
          
          temporaryCursor = temporaryData.cursor;
          hasMoreTemporary = temporaryData.photos.length >= 100;
        } else if (temporaryResponse) {
          hasMoreTemporary = false;
        }

        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Ñ–æ—Ç–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –∑ –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—î—é
        const existingIds = new Set(allPhotos.map(p => p.idPhoto));
        const trulyNewPhotos = newPhotos.filter(photo => !existingIds.has(photo.idPhoto));
        allPhotos.push(...trulyNewPhotos);
        
        // –°–æ—Ä—Ç—É—î–º–æ —ñ –ø–æ–∫–∞–∑—É—î–º–æ —Ñ–æ—Ç–æ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –±–∞—Ç—á—É
        const sortedPhotos = allPhotos.sort((a, b) => b.idPhoto - a.idPhoto);
        setPhotos(sortedPhotos);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ –≤ —î–¥–∏–Ω–∏–π –∫–µ—à
        if (trulyNewPhotos.length > 0) {
          // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ regular —Ç–∞ temporary —Ñ–æ—Ç–æ
          const regularPhotos = trulyNewPhotos.filter(photo => !temporaryPhotoIds.has(photo.idPhoto));
          const tempPhotos = trulyNewPhotos.filter(photo => temporaryPhotoIds.has(photo.idPhoto));
          
          if (regularPhotos.length > 0) {
            addPhotosToUnifiedCache(regularPhotos, false);
          }
          if (tempPhotos.length > 0) {
            addPhotosToUnifiedCache(tempPhotos, true);
          }
        }

        console.log('üì∏ Current total photos:', sortedPhotos.length);

        // –ü—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –±–∞—Ç—á—É - –ø—Ä–∏–±–∏—Ä–∞—î–º–æ loading —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏
        if (isFirstBatch) {
          setLoading(false); // –ü–æ–∫–∞–∑—É—î–º–æ —Ñ–æ—Ç–æ –æ–¥—Ä–∞–∑—É
          isFirstBatch = false;

          // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Ñ–æ—Ç–æ
          if (idRegularUser && context === 'chat' && sortedPhotos.length > 0) {
            loadPhotoStatuses(sortedPhotos, idRegularUser);
          }
        } else {
          // –î–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –±–∞—Ç—á—ñ–≤ - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥—ñ–π—Å–Ω–æ –Ω–æ–≤–∏—Ö —Ñ–æ—Ç–æ
          if (idRegularUser && context === 'chat' && trulyNewPhotos.length > 0) {
            loadPhotoStatuses(trulyNewPhotos, idRegularUser);
          }
        }
      }

      // –§—ñ–Ω–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      const stillHasMore = (hasMoreRegular || hasMoreTemporary) && allPhotos.length >= maxInitialPhotos;
      setHasMore(stillHasMore);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—É—Ä—Å–æ—Ä–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      setRegularCursor(regularCursor);
      setTemporaryCursor(temporaryCursor);
      
      console.log('üì∏ Initial photos loaded:', allPhotos.length);
      console.log('üì∏ Has more photos:', stillHasMore);
      
      // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Ñ–æ—Ç–æ –ø–æ —Ç–∏–ø–∞—Ö
      const specialCount = allPhotos.filter(photo => isSpecialPhoto(photo)).length;
      const temporaryCount = allPhotos.filter(photo => isTemporaryPhoto(photo)).length;
      const regularCount = allPhotos.filter(photo => !isSpecialPhoto(photo) && !isTemporaryPhoto(photo)).length;
      
      console.log('üì∏ Temporary photo IDs:', Array.from(temporaryPhotoIds));
      
      console.log('üìä Initial photo distribution:', {
        total: allPhotos.length,
        regular: regularCount,
        special: specialCount,
        temporary: temporaryCount,
        hasMore: stillHasMore
      });

    } catch (err) {
      console.error('‚ùå Error loading initial photos:', err);
      setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ');
      setLoading(false);
    }
  }, [profileId, loading, context, idRegularUser, isSpecialPhoto, isTemporaryPhoto, loadPhotoStatuses]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ–æ—Ç–æ –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ
  const loadMorePhotos = useCallback(async () => {
    if (loading || !hasMore) return;

    setLoading(true);
    console.log('üì∏ Loading more photos via scroll...');

    try {
      const requests = [];
      let hasMoreRegular = !!regularCursor;
      let hasMoreTemporary = !!temporaryCursor;
      
      // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∫—É—Ä—Å–æ—Ä–∏
      if (hasMoreRegular) {
        requests.push(
          apiGet(`/api/gallery/${profileId}/photos`, {
            cursor: regularCursor,
            limit: '100',
            statuses: 'approved,approved_by_ai'
          })
        );
      }
      
      if (hasMoreTemporary) {
        requests.push(
          apiGet(`/api/gallery/${profileId}/photos`, {
            cursor: temporaryCursor,
            limit: '100',
            isTemporary: 'true'
          })
        );
      }

      if (requests.length === 0) {
        setHasMore(false);
        setLoading(false);
        return;
      }

      const responses = await Promise.all(requests);
      let regularResponse = null;
      let temporaryResponse = null;

      // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      if (hasMoreRegular && hasMoreTemporary) {
        [regularResponse, temporaryResponse] = responses;
      } else if (hasMoreRegular) {
        [regularResponse] = responses;
      } else if (hasMoreTemporary) {
        [temporaryResponse] = responses;
      }

      const newPhotos: Photo[] = [];
      let newRegularCursor = regularCursor;
      let newTemporaryCursor = temporaryCursor;

      // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      const typedRegularResponse = regularResponse as { success: boolean; data?: GalleryResponse; error?: string };
      if (regularResponse && typedRegularResponse.success) {
        const regularData = typedRegularResponse.data as GalleryResponse;
        console.log('üì∏ More regular photos:', regularData.photos.length);
        newPhotos.push(...regularData.photos);
        newRegularCursor = regularData.cursor;
        hasMoreRegular = regularData.photos.length >= 100;
      } else if (regularResponse) {
        hasMoreRegular = false;
        newRegularCursor = '';
      }

      const typedTemporaryResponse = temporaryResponse as { success: boolean; data?: GalleryResponse; error?: string };
      if (temporaryResponse && typedTemporaryResponse.success) {
        const temporaryData = typedTemporaryResponse.data as GalleryResponse;
        console.log('üì∏ More temporary photos:', temporaryData.photos.length);
        newPhotos.push(...temporaryData.photos);
        
        // –í—ñ–¥–º—ñ—á–∞—î–º–æ —Ü—ñ —Ñ–æ—Ç–æ —è–∫ temporary
        setTemporaryPhotoIds(prev => {
          const newSet = new Set(prev);
          temporaryData.photos.forEach(photo => newSet.add(photo.idPhoto));
          return newSet;
        });
        
        newTemporaryCursor = temporaryData.cursor;
        hasMoreTemporary = temporaryData.photos.length >= 100;
      } else if (temporaryResponse) {
        hasMoreTemporary = false;
        newTemporaryCursor = '';
      }

      // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Ñ–æ—Ç–æ –∑ –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—î—é
      setPhotos(prev => {
        const existingIds = new Set(prev.map(p => p.idPhoto));
        const trulyNewPhotos = newPhotos.filter(photo => !existingIds.has(photo.idPhoto));
        const updatedPhotos = [...prev, ...trulyNewPhotos].sort((a, b) => b.idPhoto - a.idPhoto);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ —Ñ–æ—Ç–æ –≤ —î–¥–∏–Ω–∏–π –∫–µ—à
        if (trulyNewPhotos.length > 0) {
          // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ regular —Ç–∞ temporary —Ñ–æ—Ç–æ
          const regularPhotos = trulyNewPhotos.filter(photo => !temporaryPhotoIds.has(photo.idPhoto));
          const tempPhotos = trulyNewPhotos.filter(photo => temporaryPhotoIds.has(photo.idPhoto));
          
          if (regularPhotos.length > 0) {
            addPhotosToUnifiedCache(regularPhotos, false);
          }
          if (tempPhotos.length > 0) {
            addPhotosToUnifiedCache(tempPhotos, true);
          }
        }
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —Ñ–æ—Ç–æ
        if (idRegularUser && context === 'chat' && trulyNewPhotos.length > 0) {
          loadPhotoStatuses(trulyNewPhotos, idRegularUser);
        }
        
        return updatedPhotos;
      });

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫—É—Ä—Å–æ—Ä–∏ —Ç–∞ hasMore
      setRegularCursor(newRegularCursor);
      setTemporaryCursor(newTemporaryCursor);
      setHasMore(hasMoreRegular || hasMoreTemporary);

      console.log('üì∏ More photos loaded. HasMore:', hasMoreRegular || hasMoreTemporary);

    } catch (err) {
      console.error('‚ùå Error loading more photos:', err);
      setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ–æ—Ç–æ');
    } finally {
      setLoading(false);
    }
  }, [profileId, loading, hasMore, regularCursor, temporaryCursor, context, idRegularUser, loadPhotoStatuses]);

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ ref
  useEffect(() => {
    loadPhotosRef.current = loadMorePhotos;
  }, [loadMorePhotos]);

  // –û–±—Ä–æ–±–Ω–∏–∫ —Å–∫—Ä–æ–ª—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –º–µ–¥—ñ–∞
  const handleScroll = useCallback(() => {
    const container = scrollContainerRef.current;
    if (!container || loading) return;

    const { scrollTop, scrollHeight, clientHeight } = container;
    const scrollPercentage = (scrollTop + clientHeight) / scrollHeight;

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±—ñ–ª—å—à–µ –º–µ–¥—ñ–∞ –∫–æ–ª–∏ –¥–æ—Å–∫—Ä–æ–ª–∏–ª–∏ –¥–æ 80%
    if (scrollPercentage > 0.8) {
      if (mediaType === 'photo' && hasMore) {
        console.log('üîÑ Scroll threshold reached! Loading more photos...');
        loadMorePhotos();
      } else if (mediaType === 'video' && hasMoreVideos) {
        console.log('üîÑ Scroll threshold reached! Loading more videos...');
        loadVideos(false);
      } else if (mediaType === 'audio' && hasMoreAudios) {
        console.log('üîÑ Scroll threshold reached! Loading more audios...');
        loadAudios(false);
      }
    }
  }, [loading, hasMore, hasMoreVideos, hasMoreAudios, mediaType, loadMorePhotos, loadVideos, loadAudios]);

  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∫—Ä–æ–ª—É
  useEffect(() => {
    const container = scrollContainerRef.current;
    if (!container) return;

    container.addEventListener('scroll', handleScroll);
    return () => {
      container.removeEventListener('scroll', handleScroll);
    };
  }, [handleScroll]);

  // –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —è–∫—â–æ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Ñ—ñ–ª—å—Ç—Ä—ñ –º–µ–Ω—à–µ 15 —Ñ–æ—Ç–æ
  useEffect(() => {
    if (!isOpen || loading || !hasMore) return;

    const timeoutId = setTimeout(() => {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—É –ª–æ–≥—ñ–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
      const currentFilteredPhotos = filterPhotosByTypeAndStatus(photos, photoType, statusFilter, context);

      const minPhotosThreshold = 15;
      console.log('üîç Auto-load check:', {
        photoType,
        statusFilter,
        currentFilteredCount: currentFilteredPhotos.length,
        minThreshold: minPhotosThreshold,
        hasMore,
        loading
      });

      if (currentFilteredPhotos.length < minPhotosThreshold && hasMore && !loading) {
        console.log('üöÄ Auto-loading more photos - current filter has only', currentFilteredPhotos.length, 'photos');
        loadMorePhotos();
      }
    }, 1000); // –ó–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± –¥–∞—Ç–∏ —á–∞—Å —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏—Å—è

    return () => clearTimeout(timeoutId);
  }, [isOpen, photos.length, photoType, statusFilter, context, hasMore, loading, filterPhotosByTypeAndStatus, loadMorePhotos]);

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ñ–æ—Ç–æ –∑–∞ —Ç–∏–ø–æ–º —Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–º
  const filteredPhotos = useMemo(() => {
    return filterPhotosByTypeAndStatus(photos, photoType, statusFilter, context);
  }, [photos, photoType, statusFilter, context, filterPhotosByTypeAndStatus]);

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥–µ–æ
  const filteredVideos = useMemo(() => {
    return filterVideosByStatus(videos, statusFilter);
  }, [videos, statusFilter, filterVideosByStatus]);

  // –§—É–Ω–∫—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
  const filterAudiosByStatus = useCallback((
    audios: Audio[], 
    statusFilter: 'all' | 'available' | 'accessed' | 'sent'
  ): Audio[] => {
    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
    if (statusFilter !== 'all') {
      return audios.filter(audio => {
        const status = audioStatuses.get(audio.id);
        switch (statusFilter) {
          case 'available':
            // –î–æ—Å—Ç—É–ø–Ω—ñ: —Å—Ç–∞—Ç—É—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ null
            return status === null || typeof status === 'undefined';
          case 'accessed':
            return status === 'accessed'; // –¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ
          case 'sent':
            // TT –¥–ª—è –∞—É–¥—ñ–æ –ø–æ–≤–µ—Ä—Ç–∞—î 'accessed' –∑–∞–º—ñ—Å—Ç—å 'sent' ‚Äî –≤—Ä–∞—Ö–æ–≤—É—î–º–æ –æ–±–∏–¥–≤–∞ —è–∫ ¬´–Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ¬ª
            return status === 'sent' || status === 'accessed';
          default:
            return true;
        }
      });
    }

    return audios;
  }, [audioStatuses]);

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞—É–¥—ñ–æ
  const filteredAudios = useMemo(() => {
    return filterAudiosByStatus(audios, statusFilter);
  }, [audios, statusFilter, filterAudiosByStatus]);

  // –í–∏–¥–∞–ª—è—î–º–æ checkAndLoadMorePhotos —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–¥—ñ–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –≥–∞–ª–µ—Ä–µ—ó –∞–±–æ –∑–º—ñ–Ω—ñ —Ç–∏–ø—É
  useEffect(() => {
    if (isOpen) {
      if (mediaType === 'photo') {
        setPhotos([]);
        setRegularCursor('');
        setTemporaryCursor('');
        setHasMore(true);
        setError(null);
        setAutoLoadAttempts(0); // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ
        setPhotoStatuses(new Map()); // –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ —Ñ–æ—Ç–æ

        setStatusRequestedPhotos(new Set()); // –û—á–∏—â—É—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —Å—Ç–∞—Ç—É—Å—ñ–≤
        setTemporaryPhotoIds(new Set()); // –û—á–∏—â—É—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è temporary —Ñ–æ—Ç–æ
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä—à—ñ 500 —Ñ–æ—Ç–æ
        loadInitialPhotos();
      } else if (mediaType === 'video') {
        setVideos([]);
        setVideoCursor('');
        setHasMoreVideos(true);
        setVideoStatuses(new Map()); // –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –≤—ñ–¥–µ–æ
        setStatusRequestedVideos(new Set()); // –û—á–∏—â—É—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —Å—Ç–∞—Ç—É—Å—ñ–≤ –≤—ñ–¥–µ–æ
        setError(null);
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–µ–æ
        loadVideos(true);
      } else if (mediaType === 'audio') {
        setAudios([]);
        setAudioCursor('');
        setHasMoreAudios(true);
        setSelectedAudios([]);
        setAudioStatuses(new Map()); // –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –∞—É–¥—ñ–æ
        setStatusRequestedAudios(new Set()); // –û—á–∏—â—É—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∞—É–¥—ñ–æ
        setError(null);
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞—É–¥—ñ–æ
        loadAudios(true);
      }
    } else {
      // –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ
      setError(null);
      setLoading(false);
    }
  }, [isOpen, profileId, mediaType]);



  // –¶–µ–π useEffect —Ç–µ–ø–µ—Ä –æ–±'—î–¥–Ω–∞–Ω–∏–π –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º, –≤–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç



  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–æ—Ç–æ
  const handlePhotoSelect = (photo: Photo) => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ —Ü–µ —Ñ–æ—Ç–æ
    if (!isPhotoSelectable(photo)) {
      return; // –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–±—ñ—Ä
    }

    setSelectedPhotos(prev => {
      const isSelected = prev.some(p => p.idPhoto === photo.idPhoto);
      
      if (isSelected) {
        // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ –≤–∏–±—Ä–∞–Ω–∏—Ö
        return prev.filter(p => p.idPhoto !== photo.idPhoto);
      } else {
        // –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–æ –≤–∏–±—Ä–∞–Ω–∏—Ö (–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º)
        if (prev.length >= maxSelection) {
          return prev;
        }
        return [...prev, photo];
      }
    });
  };

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤—ñ–¥–µ–æ
  const handleVideoSelect = (video: Video) => {
    setSelectedVideos(prev => {
      const isSelected = prev.some(v => v.idVideo === video.idVideo);
      
      if (isSelected) {
        // –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–µ–æ –∑ –≤–∏–±—Ä–∞–Ω–∏—Ö
        return prev.filter(v => v.idVideo !== video.idVideo);
      } else {
        // –î–æ–¥–∞—î–º–æ –≤—ñ–¥–µ–æ –¥–æ –≤–∏–±—Ä–∞–Ω–∏—Ö (–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º)
        if (prev.length >= maxSelection) {
          return prev;
        }
        return [...prev, video];
      }
    });
  };

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ–æ—Ç–æ
  const handleSendPhotos = async () => {
    if (selectedPhotos.length === 0) return;

    // –Ø–∫—â–æ —î idRegularUser, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ API
    if (idRegularUser && context === 'chat') {
      // –û–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ: –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      try {
        onPhotoSelect(selectedPhotos);
      } catch {}
      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª–∫—É –æ–¥—Ä–∞–∑—É, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–∞—á–∏–≤ —á–∞—Ç
      try {
        onClose();
      } catch {}

      setLoading(true);
      try {
        const response = await apiPost('/api/gallery/send-photos', {
          idsGalleryPhotos: selectedPhotos.map(p => p.idPhoto),
          idRegularUser,
          profileId: parseInt(profileId)
        });

        const typedResponse = response as { success: boolean; error?: string };
        if (typedResponse.success) {
          setSelectedPhotos([]);
          try { window.dispatchEvent(new CustomEvent('dialog:sent', { detail: { profileId: parseInt(profileId), clientId: idRegularUser, kind: 'photos' } })); } catch {}
        } else {
          setError('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ');
        }
      } catch {
        setError('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ');
      } finally {
        setLoading(false);
      }
    } else {
      // –°—Ç–∞—Ä–∏–π —Å–ø–æ—Å—ñ–± - —á–µ—Ä–µ–∑ callback
      onPhotoSelect(selectedPhotos);
      onClose();
    }
  };

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤–∏–±—Ä–∞–Ω–∏—Ö –≤—ñ–¥–µ–æ
  const handleSendVideos = async () => {
    if (selectedVideos.length === 0) return;

    // –Ø–∫—â–æ —î idRegularUser, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ API
    if (idRegularUser && context === 'chat') {
      setLoading(true);
      try {
        const response = await apiPost('/api/gallery/send-videos', {
          idsGalleryVideos: selectedVideos.map(v => v.idVideo),
          idRegularUser,
          profileId: parseInt(profileId)
        });

        const typedResponse = response as { success: boolean; data?: any; error?: string };
        if (typedResponse.success) {
          onClose();
          setSelectedVideos([]);
          try { window.dispatchEvent(new CustomEvent('dialog:sent', { detail: { profileId: parseInt(profileId), clientId: idRegularUser, kind: 'videos' } })); } catch {}
        } else {
          setError('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–µ–æ');
        }
      } catch {
        setError('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–µ–æ');
      } finally {
        setLoading(false);
      }
    } else {
      // –î–ª—è —ñ–Ω—à–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ–≤ –ø–æ–∫–∏ —â–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ
      setError('–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–µ–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ —á–∞—Ç—ñ');
    }
  };

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤–∏–±—Ä–∞–Ω–∏—Ö –∞—É–¥—ñ–æ
  const handleSendAudios = async () => {
    if (selectedAudios.length === 0) return;

    // –Ø–∫—â–æ —î idRegularUser, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ API
    if (idRegularUser && context === 'chat') {
      setLoading(true);
      try {
        const response = await apiPost('/api/gallery/send-audios', {
          idsGalleryAudios: selectedAudios.map(a => a.id),
          idRegularUser,
          profileId: parseInt(profileId)
        });

        const typedResponse = response as { success: boolean; data?: any; error?: string };
        if (typedResponse.success) {
          onClose();
          setSelectedAudios([]);
          try { window.dispatchEvent(new CustomEvent('dialog:sent', { detail: { profileId: parseInt(profileId), clientId: idRegularUser, kind: 'audios' } })); } catch {}
        } else {
          setError('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞—É–¥—ñ–æ');
        }
      } catch {
        setError('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞—É–¥—ñ–æ');
      } finally {
        setLoading(false);
      }
    } else {
      // –î–ª—è —ñ–Ω—à–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ–≤ –ø–æ–∫–∏ —â–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ
      setError('–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞—É–¥—ñ–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ —á–∞—Ç—ñ');
    }
  };

  // –í–∏–±—ñ—Ä/—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –∞—É–¥—ñ–æ
  const handleAudioSelect = (audio: Audio) => {
    setSelectedAudios(prev => {
      const isSelected = prev.some(a => a.id === audio.id);
      if (isSelected) {
        return prev.filter(a => a.id !== audio.id);
      } else if (prev.length < maxSelection) {
        return [...prev, audio];
      }
      return prev;
    });
  };

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞—É–¥—ñ–æ –ø–ª–µ—î—Ä–∞
  const handleAudioPlay = (audio: Audio) => {
    // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∞—É–¥—ñ–æ, —è–∫—â–æ –≤—ñ–Ω –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è
    if (currentPlayingAudio && currentPlayingAudio.id !== audio.id) {
      const prevAudioElement = audioPlayersRef.current.get(currentPlayingAudio.id);
      if (prevAudioElement && !prevAudioElement.paused) {
        prevAudioElement.pause();
      }
    }
    setCurrentPlayingAudio(audio);
  };

  const handleAudioPause = () => {
    // –ü–ª–µ—î—Ä —Å–∞–º –∫–µ—Ä—É—î –ø–∞—É–∑–æ—é, –∞–ª–µ –º–æ–∂–µ–º–æ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  };

  const handleAudioEnded = () => {
    setCurrentPlayingAudio(null);
  };

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞—É–¥—ñ–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  const registerAudioElement = (audioId: number, element: HTMLAudioElement) => {
    audioPlayersRef.current.set(audioId, element);
  };

  const unregisterAudioElement = (audioId: number) => {
    audioPlayersRef.current.delete(audioId);
  };

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∏–π Set –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ–æ—Ç–æ
  const selectedPhotoIds = useMemo(() => {
    return new Set(selectedPhotos.map(p => p.idPhoto));
  }, [selectedPhotos]);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ñ–æ—Ç–æ –≤–∏–±—Ä–∞–Ω–µ
  const isPhotoSelected = useCallback((photo: Photo) => {
    return selectedPhotoIds.has(photo.idPhoto);
  }, [selectedPhotoIds]);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ñ–æ—Ç–æ –º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏
  const isPhotoSelectable = useCallback((photo: Photo) => {
    // –†–µ–∂–∏–º –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è (–≤–∫–ª—é—á–Ω–æ –∑ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏ —Ç–∞ –ª–∏—Å—Ç–∞–º–∏): –∫–µ—Ä—É—î–º–æ—Å—è allowedPhotoTabs
    if (mode === 'attach') {
      if (allowedPhotoTabs && allowedPhotoTabs.length > 0) {
        const allowRegular = allowedPhotoTabs.includes('regular') && !isSpecialPhoto(photo) && !isTemporaryPhoto(photo);
        const allowTemporary = allowedPhotoTabs.includes('temporary') && isTemporaryPhoto(photo) && !isSpecialPhoto(photo);
        const allowSpecial = allowedPhotoTabs.includes('special') && isSpecialExactPhoto(photo);
        const allowSpecialPlus = allowedPhotoTabs.includes('special_plus') && isSpecialPlusPhoto(photo);
        return allowRegular || allowTemporary || allowSpecial || allowSpecialPlus;
      }
      // –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ, —É —Ä–µ–∂–∏–º—ñ attach –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤—Å—ñ –Ω–µ—Å–µ–∫—Ä–µ—Ç–Ω—ñ —Ñ–æ—Ç–æ (–±–µ–∑ special)
      return !isSpecialPhoto(photo);
    }
    // –£ –∑–≤–∏—á–∞–π–Ω–æ–º—É —á–∞—Ç—ñ –Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ special
    if (context === 'chat') {
      return !isSpecialPhoto(photo);
    }
    return true;
  }, [mode, allowedPhotoTabs, context, isSpecialPhoto, isSpecialExactPhoto, isSpecialPlusPhoto, isTemporaryPhoto]);

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –≤—ñ–¥–µ–æ
  const formatDuration = useCallback((seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }, []);

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∏–π Set –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–±—Ä–∞–Ω–∏—Ö –≤—ñ–¥–µ–æ
  const selectedVideoIds = useMemo(() => {
    return new Set(selectedVideos.map(v => v.idVideo));
  }, [selectedVideos]);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤—ñ–¥–µ–æ –≤–∏–±—Ä–∞–Ω–µ
  const isVideoSelected = useCallback((video: Video) => {
    return selectedVideoIds.has(video.idVideo);
  }, [selectedVideoIds]);

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞—É–¥—ñ–æ –≤–∏–±—Ä–∞–Ω–µ
  const isAudioSelected = useCallback((audio: Audio) => {
    return selectedAudios.some(a => a.id === audio.id);
  }, [selectedAudios]);


  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]">
      <div className="bg-white rounded-lg w-full max-w-4xl h-[80vh] flex flex-col">
        {/* Header with media type tabs and close button */}
        <div className="flex items-center justify-between p-3">
          <div className="flex space-x-1 bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setMediaType('photo')}
              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                mediaType === 'photo'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              –§–æ—Ç–æ
            </button>
            <button
              onClick={() => setMediaType('video')}
              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                mediaType === 'video'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              –í—ñ–¥–µ–æ
            </button>
            {(mode !== 'attach' || allowAudio) && (
              <button
                onClick={() => setMediaType('audio')}
                className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                  mediaType === 'audio'
                    ? 'bg-white text-gray-900 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                –ê—É–¥—ñ–æ
              </button>
            )}
            {mode === 'attach' && !allowAudio && (
              <span className="ml-2 text-xs text-gray-400">(—É —Ä–µ–∂–∏–º—ñ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –∞—É–¥—ñ–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ)</span>
            )}
          </div>

          {/* Status filters for all media types */}
          <div className="flex space-x-1 bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setStatusFilter('all')}
              className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                statusFilter === 'all'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
              </svg>
              <span>–£—Å—ñ</span>
            </button>
            <button
              onClick={() => setStatusFilter('available')}
              className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                statusFilter === 'available'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>–î–æ—Å—Ç—É–ø–Ω—ñ</span>
            </button>
            <button
              onClick={() => setStatusFilter('accessed')}
              className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                statusFilter === 'accessed'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
              </svg>
              <span>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ</span>
            </button>
            <button
              onClick={() => setStatusFilter('sent')}
              className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                statusFilter === 'sent'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
              </svg>
              <span>–ù–∞–¥—ñ—Å–ª–∞–Ω—ñ</span>
            </button>
          </div>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 p-2"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* –î–µ–≤–∞–π–¥–µ—Ä –∑ —ñ–Ω–¥–∏–∫–∞—Ü—ñ—î—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
        <div className={`border-t-2 transition-colors duration-300 ${
          loading || (mediaType === 'photo' && filteredPhotos.length < 15 && hasMore) || 
          (mediaType === 'video' && videos.length < 15 && hasMoreVideos)
            ? 'border-blue-500' 
            : 'border-gray-200'
        }`} style={{
          animation: loading || (mediaType === 'photo' && filteredPhotos.length < 15 && hasMore) || 
          (mediaType === 'video' && videos.length < 15 && hasMoreVideos)
            ? 'pulse 0.8s ease-in-out infinite alternate' 
            : 'none'
        }}></div>

        {/* Content */}
        <div className="flex-1 flex min-h-0">
          {mediaType === 'photo' ? (
            /* Photos Grid */
            <div className="flex-1 p-3 flex flex-col min-h-0">
            <div className="flex items-center justify-between mb-3">
              {/* Photo type tabs - only in chat context */}
              {context === 'chat' ? (
                <div className="flex space-x-1 bg-gray-100 rounded-lg p-1">
                  {(!allowedPhotoTabs || allowedPhotoTabs.includes('regular')) && (
                    <button
                      onClick={() => setPhotoType('regular')}
                      className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors ${
                        photoType === 'regular'
                          ? 'bg-white text-gray-900 shadow-sm'
                          : 'text-gray-600 hover:text-gray-900'
                      }`}
                    >
                      –ó–≤–∏—á–∞–π–Ω—ñ
                    </button>
                  )}
                  {(!allowedPhotoTabs || allowedPhotoTabs.includes('special')) && (
                    <button
                      onClick={() => setPhotoType('special')}
                      className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                        photoType === 'special'
                          ? 'bg-white text-gray-900 shadow-sm'
                          : 'text-gray-600 hover:text-gray-900'
                      }`}
                    >
                      <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0112.12 15.12z" />
                      </svg>
                      <span>Special</span>
                    </button>
                  )}
                  {(!allowedPhotoTabs || allowedPhotoTabs.includes('special_plus')) && (
                    <button
                      onClick={() => setPhotoType('special_plus')}
                      className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                        photoType === 'special_plus'
                          ? 'bg-white text-gray-900 shadow-sm'
                          : 'text-gray-600 hover:text-gray-900'
                      }`}
                      title={'Special+'}
                    >
                      <span className="relative inline-flex items-center justify-center w-4 h-4">
                        <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0112.12 15.12z" />
                          </svg>
                          <span className="absolute -top-0.5 -right-0.5 w-3 h-3 rounded-full bg-white text-pink-600 text-[9px] font-extrabold leading-none flex items-center justify-center border border-pink-500">+</span>
                        </span>
                        <span>Special+</span>
                      </button>
                    )}
                  {(!allowedPhotoTabs || allowedPhotoTabs.includes('temporary')) && (
                    <button
                      onClick={() => setPhotoType('temporary')}
                      className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                        photoType === 'temporary'
                          ? 'bg-white text-gray-900 shadow-sm'
                          : 'text-gray-600 hover:text-gray-900'
                      }`}
                    >
                      <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V5z" />
                      </svg>
                      <span>–¢–∏–º—á–∞—Å–æ–≤—ñ</span>
                    </button>
                  )}
                </div>
              ) : (
                <h3 className="font-medium">All photos</h3>
              )}
              
              {/* Status filters moved to header */}
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                <p className="text-red-600">{error}</p>
              </div>
            )}



            {/* Photos Grid */}
            <div 
              ref={scrollContainerRef}
              className="overflow-y-auto flex-1 p-2 custom-scroll"
            >
              <div 
                className="grid grid-cols-5 gap-2"
                style={{
                  gridAutoRows: 'minmax(0, max-content)'
                }}
              >
              {filteredPhotos.map((photo) => {
                const isSpecial = isSpecialPhoto(photo);
                const isSpecialPlus = isSpecialPlusPhoto(photo);
                const isSpecialExact = isSpecialExactPhoto(photo);
                const isTemporary = isTemporaryPhoto(photo);
                const isSelectable = isPhotoSelectable(photo);
                // –£ —Ä–µ–∂–∏–º—ñ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–±—ñ—Ä special/special+ —ñ –ø–æ–∫–∞–∑—É—î–º–æ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏
                const shouldBeGrayed = context === 'chat' && isSpecial && mode !== 'attach';
                
                return (
                  <div
                    key={photo.idPhoto}
                    className={`group relative aspect-square rounded-lg overflow-hidden border-2 transition-all ${
                      !isSelectable
                        ? 'cursor-not-allowed border-gray-300'
                        : isPhotoSelected(photo)
                        ? 'cursor-pointer border-blue-500 ring-2 ring-blue-200'
                        : 'cursor-pointer border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => handlePhotoSelect(photo)}
                  >
                    <img
                      src={photo.urls.urlPreview}
                      alt={`Photo ${photo.idPhoto}`}
                      className={`w-full h-full object-cover ${shouldBeGrayed ? 'grayscale opacity-60' : ''}`}
                      loading="lazy"
                    />
                    
                    {/* Special / Special+ photo indicator */}
                    {(isSpecialExact || isSpecialPlus) && (
                      <div className="absolute top-1 left-1 w-6 h-6 bg-pink-500 rounded-full flex items-center justify-center shadow-sm relative">
                        {/* base special icon */}
                        <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0112.12 15.12z" />
                        </svg>
                        {/* plus overlay for special+ */}
                        {isSpecialPlus && (
                          <div className="absolute -top-0.5 -right-0.5 w-3 h-3 rounded-full bg-white text-pink-600 flex items-center justify-center text-[10px] font-extrabold leading-none">+</div>
                        )}
                      </div>
                    )}

                    {/* Selection indicator */}
                    {isPhotoSelected(photo) && (
                      <div className="absolute top-1 right-1 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                        <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                      </div>
                    )}

                    {/* Photo status indicator */}
                    {(() => {
                      const status = photoStatuses.get(photo.idPhoto);
                      if (!status) return null;
                      
                      return (
                        <div className={`absolute bottom-1 left-1 w-5 h-5 rounded-full flex items-center justify-center ${
                          status === 'accessed' 
                            ? 'bg-green-500' 
                            : status === 'sent' 
                            ? 'bg-yellow-500' 
                            : 'bg-black bg-opacity-60'
                        }`}>
                          {status === 'accessed' ? (
                            <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                          ) : status === 'sent' ? (
                            <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                            </svg>
                          ) : null}
                        </div>
                      );
                    })()}

                    {/* Full size view button - –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –ø—Ä–∏ —Ö–æ–≤–µ—Ä—ñ */}
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        setFullSizePhoto(photo);
                      }}
                      className="absolute bottom-1 right-1 w-12 h-12 bg-black bg-opacity-60 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-200 hover:bg-opacity-80"
                      title="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –ø–æ–≤–Ω–æ–º—É —Ä–æ–∑–º—ñ—Ä—ñ"
                    >
                      <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                      </svg>
                    </button>
                  </div>
                );
              })}



              {/* No more photos message */}
              {!loading && !hasMore && filteredPhotos.length > 0 && (
                <div className="col-span-5 flex flex-col items-center py-6 text-gray-500">
                  <svg className="w-12 h-12 mb-2 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <p className="text-sm font-medium mb-1">–¶–µ –≤—Å—ñ —Ñ–æ—Ç–æ</p>
                  <p className="text-xs text-gray-400">–ë—ñ–ª—å—à–µ —Ñ–æ—Ç–æ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î</p>
                </div>
              )}
              </div>
            </div>



            {/* Empty state for different sections */}
            {context === 'chat' && filteredPhotos.length === 0 && (
              <div className="flex flex-col items-center justify-center py-12 text-gray-500">
                {/* –ü–æ–∫–∞–∑—É—î–º–æ "–®—É–∫–∞—î–º–æ" –ø–æ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–±–æ —î —â–µ —Ñ–æ—Ç–æ */}
                {(loading || hasMore) ? (
                  <>
                    <svg className="w-12 h-12 mb-4 animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                    <p className="text-lg font-medium mb-2">–®—É–∫–∞—î–º–æ —Ñ–æ—Ç–æ...</p>
                    <p className="text-sm text-center">–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –∑ —Å–µ—Ä–≤–µ—Ä–∞</p>
                  </>
                ) : (
                  <>
                <svg className="w-12 h-12 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
                {photoType === 'regular' && (
                  <>
                    <p className="text-lg font-medium mb-2">–ù–µ–º–∞—î –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ñ–æ—Ç–æ</p>
                    <p className="text-sm text-center">–í—Å—ñ —Ñ–æ—Ç–æ –≤ —Ü—å–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ –º–∞—é—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å.<br/>–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ —Ä–æ–∑–¥—ñ–ª—É "Special" –∞–±–æ "–¢–∏–º—á–∞—Å–æ–≤—ñ" —â–æ–± —ó—Ö –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏.</p>
                  </>
                )}
                {photoType === 'special' && (
                  <>
                    <p className="text-lg font-medium mb-2">–ù–µ–º–∞—î –æ—Å–æ–±–ª–∏–≤–∏—Ö —Ñ–æ—Ç–æ</p>
                    <p className="text-sm text-center">–í —Ü—å–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ –∑ —Ç–µ–≥–∞–º–∏ "special".</p>
                  </>
                )}
                {photoType === 'temporary' && (
                  <>
                    <p className="text-lg font-medium mb-2">–ù–µ–º–∞—î —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–æ—Ç–æ</p>
                    <p className="text-sm text-center">–í —Ü—å–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ –Ω–µ–º–∞—î —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–æ—Ç–æ.</p>
                  </>
                )}
                  </>
                )}
              </div>
            )}


          </div>
          ) : mediaType === 'video' ? (
            /* Video Grid */
            <div className="flex-1 p-3 flex flex-col min-h-0">
              <div className="flex items-center justify-between mb-3">
                <h3 className="font-medium">–í—ñ–¥–µ–æ</h3>
              </div>
              
              {/* Status filters for videos */}
              {context === 'chat' && idRegularUser && (
                <div className="flex space-x-1 bg-gray-100 rounded-lg p-1 mb-3">
                  <button
                    onClick={() => setStatusFilter('all')}
                    className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                      statusFilter === 'all'
                        ? 'bg-white text-gray-900 shadow-sm'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                    </svg>
                    <span>–£—Å—ñ</span>
                  </button>
                  <button
                    onClick={() => setStatusFilter('available')}
                    className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                      statusFilter === 'available'
                        ? 'bg-white text-gray-900 shadow-sm'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span>–î–æ—Å—Ç—É–ø–Ω—ñ</span>
                  </button>
                  <button
                    onClick={() => setStatusFilter('accessed')}
                    className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                      statusFilter === 'accessed'
                        ? 'bg-white text-gray-900 shadow-sm'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                    <span>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ</span>
                  </button>
                  <button
                    onClick={() => setStatusFilter('sent')}
                    className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                      statusFilter === 'sent'
                        ? 'bg-white text-gray-900 shadow-sm'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                    <span>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ</span>
                  </button>
                </div>
              )}

              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                  <p className="text-red-600">{error}</p>
                </div>
              )}

              {/* Videos Grid */}
              <div 
                ref={scrollContainerRef}
                className="overflow-y-auto flex-1 p-2 custom-scroll"
              >
                <div 
                  className="grid grid-cols-5 gap-2"
                  style={{
                    gridAutoRows: 'minmax(0, max-content)'
                  }}
                >
                  {filteredVideos.map((video) => (
                    <div
                      key={video.idVideo}
                      className={`group relative aspect-square rounded-lg overflow-hidden border-2 transition-all ${
                        isVideoSelected(video)
                          ? 'cursor-pointer border-blue-500 ring-2 ring-blue-200'
                          : 'cursor-pointer border-gray-200 hover:border-gray-300'
                      }`}
                      onClick={() => handleVideoSelect(video)}
                    >
                      <img
                        src={video.urls.urlThumbnail}
                        alt={`Video ${video.idVideo}`}
                        className="w-full h-full object-cover"
                        loading="lazy"
                      />

                      {/* Duration badge */}
                      <div className="absolute bottom-1 right-1 bg-black bg-opacity-70 text-white text-xs px-2 py-1 rounded">
                        {formatDuration(video.duration)}
                      </div>

                      {/* Video status indicator */}
                      {(() => {
                        const status = videoStatuses.get(video.idVideo);
                        if (!status) return null;
                        
                        return (
                          <div className={`absolute top-1 left-1 w-5 h-5 rounded-full flex items-center justify-center ${
                            status === 'accessed' 
                              ? 'bg-green-500' 
                              : status === 'sent' 
                              ? 'bg-yellow-500' 
                              : 'bg-black bg-opacity-60'
                          }`}>
                            {status === 'accessed' ? (
                              <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                              </svg>
                            ) : status === 'sent' ? (
                              <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                              </svg>
                            ) : null}
                          </div>
                        );
                      })()}

                      {/* Selection indicator */}
                      {isVideoSelected(video) && (
                        <div className="absolute top-1 right-1 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                        </div>
                      )}

                      {/* Full size view button - –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –ø—Ä–∏ —Ö–æ–≤–µ—Ä—ñ */}
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          setFullSizeVideo(video);
                        }}
                        className="absolute bottom-1 left-1 w-12 h-12 bg-black bg-opacity-60 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-200 hover:bg-opacity-80"
                        title="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ"
                      >
                        <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                      </button>
                    </div>
                  ))}

                  {/* No more videos message */}
                  {!loading && !hasMoreVideos && videos.length > 0 && (
                    <div className="col-span-5 flex flex-col items-center py-6 text-gray-500">
                      <svg className="w-12 h-12 mb-2 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                      <p className="text-sm font-medium mb-1">–¶–µ –≤—Å—ñ –≤—ñ–¥–µ–æ</p>
                      <p className="text-xs text-gray-400">–ë—ñ–ª—å—à–µ –≤—ñ–¥–µ–æ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î</p>
                    </div>
                  )}
                </div>
              </div>

              {/* Empty state for videos */}
              {filteredVideos.length === 0 && (
                <div className="flex flex-col items-center justify-center py-12 text-gray-500">
                  {(loading || hasMoreVideos) ? (
                    <>
                      <svg className="w-12 h-12 mb-4 animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                      <p className="text-lg font-medium mb-2">–®—É–∫–∞—î–º–æ –≤—ñ–¥–µ–æ...</p>
                      <p className="text-sm text-center">–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–µ–æ –∑ —Å–µ—Ä–≤–µ—Ä–∞</p>
                    </>
                  ) : (
                    <>
                      <svg className="w-12 h-12 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                      <p className="text-lg font-medium mb-2">–ù–µ–º–∞—î –≤—ñ–¥–µ–æ</p>
                      <p className="text-sm text-center">–í —Ü—å–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≤—ñ–¥–µ–æ</p>
                    </>
                  )}
                </div>
              )}
            </div>
          ) : (
            /* Audio List */
            <div className="flex-1 p-3 flex flex-col min-h-0">
              <div className="flex items-center justify-between mb-3">
                <h3 className="font-medium">–ê—É–¥—ñ–æ</h3>
              </div>
              
              {/* Status filters for audios */}
              {context === 'chat' && idRegularUser && (
                <div className="flex space-x-1 bg-gray-100 rounded-lg p-1 mb-3">
                  <button
                    onClick={() => setStatusFilter('all')}
                    className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                      statusFilter === 'all'
                        ? 'bg-white text-gray-900 shadow-sm'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                    </svg>
                    <span>–£—Å—ñ</span>
                  </button>
                  <button
                    onClick={() => setStatusFilter('available')}
                    className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                      statusFilter === 'available'
                        ? 'bg-white text-gray-900 shadow-sm'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span>–î–æ—Å—Ç—É–ø–Ω—ñ</span>
                  </button>
                  <button
                    onClick={() => setStatusFilter('accessed')}
                    className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                      statusFilter === 'accessed'
                        ? 'bg-white text-gray-900 shadow-sm'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                    <span>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ</span>
                  </button>
                  <button
                    onClick={() => setStatusFilter('sent')}
                    className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-1 ${
                      statusFilter === 'sent'
                        ? 'bg-white text-gray-900 shadow-sm'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                    <span>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ</span>
                  </button>
                </div>
              )}

              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                  <p className="text-red-600">{error}</p>
                </div>
              )}

              {/* Audios List */}
              <div 
                ref={scrollContainerRef}
                className="overflow-y-auto flex-1 p-2 custom-scroll"
              >
                <div className="space-y-2">
                  {filteredAudios.map((audio) => (
                    <div
                      key={audio.id}
                      className={`group relative p-3 rounded-lg border-2 transition-all cursor-pointer ${
                        isAudioSelected(audio)
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                      }`}
                      onClick={() => handleAudioSelect(audio)}
                    >
                      <div className="space-y-3">
                        {/* Header with icon, title and date */}
                        <div className="flex items-center space-x-3">
                          {/* Audio icon */}
                          <div className="flex-shrink-0">
                            <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                            </svg>
                          </div>

                          {/* Audio info */}
                          <div className="flex-1 min-w-0">
                            <p className="text-sm font-medium text-gray-900 truncate">
                              {audio.title}
                            </p>
                            <p className="text-xs text-gray-500">
                              {new Date(audio.dateCreated).toLocaleDateString()}
                            </p>
                          </div>
                        </div>

                        {/* Audio Player */}
                        <div 
                          className="w-full"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <AudioPlayer
                            src={audio.urls.mp3}
                            title={audio.title}
                            duration={audio.duration}
                            audioId={audio.id}
                            onPlay={() => handleAudioPlay(audio)}
                            onPause={handleAudioPause}
                            onEnded={handleAudioEnded}
                            onRegister={registerAudioElement}
                            onUnregister={unregisterAudioElement}
                          />
                        </div>

                        {/* Audio status indicator */}
                        {(() => {
                          const status = audioStatuses.get(audio.id);
                          if (!status) return null;
                          
                          return (
                            <div className={`absolute top-2 left-2 w-4 h-4 rounded-full flex items-center justify-center ${
                              status === 'accessed' 
                                ? 'bg-green-500' 
                                : status === 'sent' 
                                ? 'bg-yellow-500' 
                                : 'bg-black bg-opacity-60'
                            }`}>
                              {status === 'accessed' ? (
                                <svg className="w-2.5 h-2.5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                </svg>
                              ) : status === 'sent' ? (
                                <svg className="w-2.5 h-2.5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                                </svg>
                              ) : null}
                            </div>
                          );
                        })()}

                        {/* Selection indicator */}
                        {isAudioSelected(audio) && (
                          <div className="absolute top-2 right-2 w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center">
                            <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>

                {/* Empty state for audios */}
                {filteredAudios.length === 0 && (
                  <div className="flex flex-col items-center justify-center py-12 text-gray-500">
                    {(loading || hasMoreAudios) ? (
                      <>
                        <svg className="w-12 h-12 mb-4 animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                        </svg>
                        <p className="text-lg font-medium mb-2">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ...</p>
                      </>
                    ) : (
                      <>
                        <svg className="w-12 h-12 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                        </svg>
                        <p className="text-lg font-medium mb-2">–ù–µ–º–∞—î –∞—É–¥—ñ–æ</p>
                        <p className="text-sm text-center">–ê—É–¥—ñ–æ —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ñ—ñ–ª—å—Ç—Ä—É</p>
                      </>
                    )}
                  </div>
                )}

                {/* Loading indicator */}
                {!loading && !hasMoreAudios && audios.length > 0 && (
                  <div className="text-center py-4 text-gray-500 text-sm">
                    –í—Å—ñ –∞—É–¥—ñ–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* Footer - show for photos, videos and audios */}
        {(mediaType === 'photo' || mediaType === 'video' || mediaType === 'audio') && (
          <div className="border-t p-3 flex items-center justify-between">
            <div className="text-sm text-gray-500">
              {mediaType === 'photo' 
                ? `${selectedPhotos.length} of ${maxSelection} selected`
                : mediaType === 'video'
                ? `${selectedVideos.length} of ${Math.min(maxSelection, filteredVideos.length)} selected`
                : `${selectedAudios.length} of ${Math.min(maxSelection, filteredAudios.length)} selected`
              }
            </div>
            <div className="flex space-x-2">
              <button
                onClick={onClose}
                className="px-4 py-2 text-gray-600 hover:text-gray-800 font-medium"
              >
                Cancel
              </button>
              {mode === 'attach' && onAttach ? (
                <button
                  onClick={() => onAttach({ photos: selectedPhotos, videos: selectedVideos })}
                  disabled={(selectedPhotos.length === 0 && selectedVideos.length === 0) || loading}
                  className={`px-6 py-2 rounded-lg font-medium transition-colors flex items-center space-x-2 ${
                    ((selectedPhotos.length > 0 || selectedVideos.length > 0) && !loading)
                      ? 'bg-blue-600 hover:bg-blue-700 text-white'
                      : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                  }`}
                >
                  <span>{actionLabel || '–ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏'}</span>
                </button>
              ) : (
                <button
                  onClick={
                    mediaType === 'photo' 
                      ? handleSendPhotos 
                      : mediaType === 'video' 
                      ? handleSendVideos 
                      : handleSendAudios
                  }
                  disabled={
                    (mediaType === 'photo' ? selectedPhotos.length === 0 
                     : mediaType === 'video' ? selectedVideos.length === 0 
                     : selectedAudios.length === 0) || loading
                  }
                  className={`px-6 py-2 rounded-lg font-medium transition-colors flex items-center space-x-2 ${
                    ((mediaType === 'photo' ? selectedPhotos.length > 0 
                      : mediaType === 'video' ? selectedVideos.length > 0 
                      : selectedAudios.length > 0) && !loading)
                      ? 'bg-blue-600 hover:bg-blue-700 text-white'
                      : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                  }`}
                >
                  {loading && (
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  )}
                  <span>{loading ? 'Sending...' : 'Send ‚Üí'}</span>
                </button>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Full size photo modal */}
      {fullSizePhoto && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-[60]"
          onClick={() => setFullSizePhoto(null)}
        >
          <div className="relative max-w-[90vw] max-h-[90vh] flex items-center justify-center">
            <img
              src={fullSizePhoto.urls.urlOriginal}
              alt={`Photo ${fullSizePhoto.idPhoto}`}
              className="max-w-full max-h-full object-contain rounded-lg cursor-pointer"
              onClick={() => setFullSizePhoto(null)}
              onError={(e) => {
                // Fallback to standard size if original fails
                const target = e.target as HTMLImageElement;
                target.src = fullSizePhoto.urls.urlStandard;
              }}
            />
            <button
              onClick={(e) => {
                e.stopPropagation();
                setFullSizePhoto(null);
              }}
              className="absolute top-4 right-4 w-10 h-10 bg-black bg-opacity-60 rounded-full flex items-center justify-center text-white hover:bg-opacity-80 transition-all"
              title="–ó–∞–∫—Ä–∏—Ç–∏"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
      )}

      {/* Full size video modal */}
      {fullSizeVideo && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-[60]"
          onClick={() => setFullSizeVideo(null)}
        >
          <div className="relative max-w-[90vw] max-h-[90vh] flex items-center justify-center">
            <video
              src={fullSizeVideo.urls.urlMp4Hd}
              controls
              autoPlay
              className="max-w-full max-h-full object-contain rounded-lg"
              onError={(e) => {
                // Fallback to SD quality if HD fails
                const target = e.target as HTMLVideoElement;
                target.src = fullSizeVideo.urls.urlMp4Sd;
              }}
            />
            <button
              onClick={(e) => {
                e.stopPropagation();
                setFullSizeVideo(null);
              }}
              className="absolute top-4 right-4 w-10 h-10 bg-black bg-opacity-60 rounded-full flex items-center justify-center text-white hover:bg-opacity-80 transition-all"
              title="–ó–∞–∫—Ä–∏—Ç–∏"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

"use client";

import React, { createContext, useContext, useRef, useCallback } from 'react';
import { io, Socket } from 'socket.io-client';
import { getAccessToken } from '@/lib/session';

interface WebSocketPoolContextType {
  getSocketForProfile: (profileId: string) => Socket | null;
  joinDialog: (profileId: string, dialogId: string) => void;
  leaveDialog: (profileId: string, dialogId: string) => void;
  disconnectProfile: (profileId: string) => void;
  disconnectAll: () => void;
}

const WebSocketPoolContext = createContext<WebSocketPoolContextType | null>(null);

export function WebSocketPoolProvider({ children }: { children: React.ReactNode }) {
  // Pool —Å–æ–∫–µ—Ç—ñ–≤: –∫–ª—é—á = profileId, –∑–Ω–∞—á–µ–Ω–Ω—è = Socket
  const socketPool = useRef<Map<string, Socket>>(new Map());
  // –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
  const activeDialogs = useRef<Map<string, string>>(new Map());
  // –¢–∞–π–º–µ—Ä–∏ –¥–ª—è cleanup
  const cleanupTimers = useRef<Map<string, NodeJS.Timeout>>(new Map());

  const createSocketForProfile = useCallback((profileId: string): Socket | null => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î —Å–æ–∫–µ—Ç –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
    const existingSocket = socketPool.current.get(profileId);
    if (existingSocket) {
      console.log(`üîå Socket already exists for profile ${profileId}, reusing`);
      return existingSocket;
    }

    const token = getAccessToken();
    const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000';
    
    if (!token) {
      console.warn(`üîå No token available for profile ${profileId}`);
      return null;
    }


    
    const socket = io(`${apiUrl}`, {
      transports: ['websocket'],
      auth: { token, profileId }, // –ü–µ—Ä–µ–¥–∞—î–º–æ profileId –≤ auth
      timeout: 10000,
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000
    });

    socket.on('connect', () => {
      // WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é ${profileId}
      
      // –Ø–∫—â–æ –±—É–≤ –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥, –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è
      const activeDialog = activeDialogs.current.get(profileId);
      if (activeDialog) {
        socket.emit('join', { dialogId: activeDialog });
      }
    });

    socket.on('disconnect', (reason: string) => {
      console.log(`üîå WebSocket disconnected for profile ${profileId}:`, reason);
    });

    socket.on('connect_error', (error: Error) => {
      console.warn(`üîå WebSocket connection error for profile ${profileId}:`, error.message);
    });

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ pool
    socketPool.current.set(profileId, socket);
    
    return socket;
  }, []);

  const getSocketForProfile = useCallback((profileId: string): Socket | null => {
    // –°–∫–∞—Å–æ–≤—É—î–º–æ cleanup —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–π
    const cleanupTimer = cleanupTimers.current.get(profileId);
    if (cleanupTimer) {
      clearTimeout(cleanupTimer);
      cleanupTimers.current.delete(profileId);
    }

    let socket = socketPool.current.get(profileId);
    
    // –Ø–∫—â–æ —Å–æ–∫–µ—Ç–∞ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
    if (!socket) {
      socket = createSocketForProfile(profileId);
    }
    // –Ø–∫—â–æ —Å–æ–∫–µ—Ç —î –∞–ª–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π, –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è
    else if (!socket.connected && !socket.connecting) {
      socket.connect();
    }
    
    return socket;
  }, [createSocketForProfile]);

  const joinDialog = useCallback((profileId: string, dialogId: string) => {
    const socket = getSocketForProfile(profileId);
    if (!socket) return;

    // –í–∏—Ö–æ–¥–∏–º–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É —è–∫—â–æ –±—É–≤
    const previousDialog = activeDialogs.current.get(profileId);
    if (previousDialog && previousDialog !== dialogId) {
      socket.emit('leave', { dialogId: previousDialog });
    }

    // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –Ω–æ–≤–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É
    socket.emit('join', { dialogId });
    activeDialogs.current.set(profileId, dialogId);
    

  }, [getSocketForProfile]);

  const leaveDialog = useCallback((profileId: string, dialogId: string) => {
    const socket = socketPool.current.get(profileId);
    if (!socket) return;

    socket.emit('leave', { dialogId });
    activeDialogs.current.delete(profileId);
    


    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è cleanup —Å–æ–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    const cleanupTimer = setTimeout(() => {
      disconnectProfile(profileId);
    }, 30000);
    
    cleanupTimers.current.set(profileId, cleanupTimer);
  }, []);

  const disconnectProfile = useCallback((profileId: string) => {
    const socket = socketPool.current.get(profileId);
    if (socket) {
      socket.disconnect();
      socketPool.current.delete(profileId);
      activeDialogs.current.delete(profileId);
      
      const cleanupTimer = cleanupTimers.current.get(profileId);
      if (cleanupTimer) {
        clearTimeout(cleanupTimer);
        cleanupTimers.current.delete(profileId);
      }
      
      console.log(`üîå Disconnected profile ${profileId}`);
    }
  }, []);

  const disconnectAll = useCallback(() => {
    console.log('üîå Disconnecting all WebSocket connections');
    
    // –û—á–∏—â—É—î–º–æ –≤—Å—ñ —Ç–∞–π–º–µ—Ä–∏
    cleanupTimers.current.forEach(timer => clearTimeout(timer));
    cleanupTimers.current.clear();
    
    // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ —Å–æ–∫–µ—Ç–∏
    socketPool.current.forEach((socket, profileId) => {
      socket.disconnect();
      console.log(`üîå Disconnected profile ${profileId}`);
    });
    
    socketPool.current.clear();
    activeDialogs.current.clear();
  }, []);

  // Cleanup –ø—Ä–∏ unmount
  React.useEffect(() => {
    return () => {
      disconnectAll();
    };
  }, [disconnectAll]);

  const contextValue: WebSocketPoolContextType = {
    getSocketForProfile,
    joinDialog,
    leaveDialog,
    disconnectProfile,
    disconnectAll
  };

  return (
    <WebSocketPoolContext.Provider value={contextValue}>
      {children}
    </WebSocketPoolContext.Provider>
  );
}

export function useWebSocketPool() {
  const context = useContext(WebSocketPoolContext);
  if (!context) {
    throw new Error('useWebSocketPool must be used within a WebSocketPoolProvider');
  }
  return context;
}

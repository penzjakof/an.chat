const { PrismaClient } = require('@prisma/client');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const prisma = new PrismaClient();

async function debugReal() {
  try {
    console.log('üîç –î–ï–ë–ê–ì –†–ï–ê–õ–¨–ù–û–ì–û API');
    console.log('======================');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const owner = await prisma.user.findFirst({
      where: { role: 'OWNER' },
      include: { agency: true }
    });
    
    console.log(`üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${owner.username} (ID: ${owner.id})`);
    
    const jwt = require('jsonwebtoken');
    const token = jwt.sign(
      {
        userId: owner.id,
        username: owner.username,
        role: owner.role,
        agencyCode: owner.agency.code
      },
      process.env.JWT_SECRET || 'your-super-secret-jwt-key-here-change-in-production',
      { expiresIn: '1h' }
    );
    
    console.log('üîê –¢–æ–∫–µ–Ω —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    
    // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –¥—ñ–∞–ª–æ–≥–∏
    console.log('\nüìû –ó–∞–ø–∏—Ç –¥—ñ–∞–ª–æ–≥—ñ–≤...');
    const dialogsResponse = await fetch('http://localhost:4000/api/chats/dialogs', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!dialogsResponse.ok) {
      console.log(`‚ùå –î—ñ–∞–ª–æ–≥–∏: ${dialogsResponse.status}`);
      return;
    }
    
    const dialogsData = await dialogsResponse.json();
    console.log(`‚úÖ –î—ñ–∞–ª–æ–≥—ñ–≤: ${dialogsData.dialogs?.length}`);
    
    if (dialogsData.dialogs?.length > 0) {
      const dialog = dialogsData.dialogs[0];
      console.log(`üìã –ü–µ—Ä—à–∏–π –¥—ñ–∞–ª–æ–≥: ${dialog.idUser}-${dialog.idInterlocutor}`);
      
      // –¢–µ–ø–µ—Ä —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      console.log('\nüì® –ó–∞–ø–∏—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...');
      
      const dialogId = `${dialog.idUser}-${dialog.idInterlocutor}`;
      const messagesUrl = `http://localhost:4000/api/chats/dialogs/${encodeURIComponent(dialogId)}/messages`;
      
      console.log(`üîó URL: ${messagesUrl}`);
      
      const messagesResponse = await fetch(messagesUrl, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log(`üì• –°—Ç–∞—Ç—É—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${messagesResponse.status}`);
      
      if (messagesResponse.ok) {
        const messagesData = await messagesResponse.json();
        console.log(`üéâ –ü–†–ê–¶–Æ–Ñ! –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${messagesData.messages?.length}`);
      } else {
        const errorText = await messagesResponse.text();
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${errorText}`);
        
        // –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
        console.log('\n‚è≥ –ß–µ–∫–∞—î–º–æ 2 —Å–µ–∫—É–Ω–¥–∏ —ñ –ø—Ä–æ–±—É—î–º–æ –∑–Ω–æ–≤—É...');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const retryResponse = await fetch(messagesUrl, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        console.log(`üì• –ü–æ–≤—Ç–æ—Ä–Ω–∏–π —Å—Ç–∞—Ç—É—Å: ${retryResponse.status}`);
        
        if (retryResponse.ok) {
          const retryData = await retryResponse.json();
          console.log(`üéâ –ü–†–ê–¶–Æ–Ñ –ü–Ü–°–õ–Ø –ü–û–í–¢–û–†–£! –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${retryData.messages?.length}`);
        } else {
          const retryError = await retryResponse.text();
          console.log(`‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${retryError}`);
        }
      }
    }
    
  } catch (error) {
    console.error('üí• –ü–æ–º–∏–ª–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugReal();

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Agency {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groups    Group[]
  users     User[]
}

model User {
  id            String          @id @default(cuid())
  username      String          @unique
  passwordHash  String
  name          String
  role          Role
  status        UserStatus  @default(ACTIVE)
  operatorCode  String?         @unique
  agencyId      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  operatorLinks OperatorGroup[]
  agency        Agency          @relation(fields: [agencyId], references: [id], onDelete: Cascade)
}

model Group {
  id        String          @id @default(cuid())
  name      String
  agencyId  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  agency    Agency          @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  operators OperatorGroup[]
  profiles  Profile[]

  @@unique([agencyId, name])
}

model OperatorGroup {
  operatorId String
  groupId    String
  assignedAt DateTime @default(now())
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  operator   User     @relation(fields: [operatorId], references: [id], onDelete: Cascade)

  @@id([operatorId, groupId])
}

model Profile {
  id                 String        @id @default(cuid())
  provider           ProviderSite
  externalId         String
  displayName        String?
  credentialLogin    String?
  credentialPassword String?
  profileId          String?
  status       ProfileStatus @default(ACTIVE)
  lastActiveAt       DateTime?
  groupId            String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  group              Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([provider, externalId])
  @@index([groupId])
  @@index([status])
  @@index([provider, profileId])
}

model TalkyTimesSession {
  id           String   @id @default(cuid())
  profileId    String   @unique
  cookies      String
  token        String?
  refreshToken String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([profileId])
  @@index([expiresAt])
}

enum Role {
  OWNER
  OPERATOR
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum ProviderSite {
  TALKYTIMES
}

enum ProfileStatus {
  ACTIVE
  INACTIVE
}

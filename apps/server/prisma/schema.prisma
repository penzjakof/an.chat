// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  OPERATOR
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum ProviderSite {
  TALKYTIMES
}

enum ProfileStatus {
  ACTIVE
  INACTIVE
}

model Agency {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  users     User[]
  groups    Group[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String      @id @default(cuid())
  username      String      @unique
  passwordHash  String
  name          String
  role          Role
  status        UserStatus  @default(ACTIVE)
  operatorCode  String?     @unique
  agencyId      String
  agency        Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  operatorLinks OperatorGroup[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Group {
  id         String          @id @default(cuid())
  name       String
  agencyId   String
  agency     Agency          @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  profiles   Profile[]
  operators  OperatorGroup[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([agencyId, name])
}

model OperatorGroup {
  operatorId String
  groupId    String
  assignedAt DateTime @default(now())

  operator User  @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  group    Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([operatorId, groupId])
}

model Profile {
  id           String         @id @default(cuid())
  provider     ProviderSite
  externalId   String
  displayName  String?
  credentialLogin   String?
  credentialPassword String?
  profileId    String?        // Platform-specific profile ID from login response
  status       ProfileStatus @default(ACTIVE)
  lastActiveAt DateTime?
  groupId      String
  group        Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([provider, externalId])
  @@index([groupId])
  @@index([status])
  @@index([provider, profileId])
}

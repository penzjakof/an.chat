generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agency {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groups    Group[]
  users     User[]
  shifts    Shift[]
  adminPanels AdminPanelConnection[]
}

model User {
  id            String          @id @default(cuid())
  username      String          @unique
  passwordHash  String
  name          String
  role          Role
  status        UserStatus  @default(ACTIVE)
  operatorCode  String?         @unique
  agencyId      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  operatorLinks OperatorGroup[]
  agency        Agency          @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  shifts        Shift[]
}

model Group {
  id            String          @id @default(cuid())
  name          String
  agencyId      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  agency        Agency          @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  operators     OperatorGroup[]
  profiles      Profile[]
  /// Активна зміна, яка утримує цю групу (null якщо група вільна)
  activeShiftId String?
  activeShift   Shift?          @relation("ShiftGroups", fields: [activeShiftId], references: [id])

  @@unique([agencyId, name])
  @@index([activeShiftId])
}

model OperatorGroup {
  operatorId String
  groupId    String
  assignedAt DateTime @default(now())
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  operator   User     @relation(fields: [operatorId], references: [id], onDelete: Cascade)

  @@id([operatorId, groupId])
}

model Shift {
  id         String   @id @default(cuid())
  operatorId String
  agencyId   String
  startedAt  DateTime @default(now())
  endedAt    DateTime?

  operator   User     @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  agency     Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  groups     Group[]  @relation("ShiftGroups")
  logs       ShiftLog[]

  @@index([operatorId])
  @@index([agencyId])
  @@index([endedAt])
}

model ShiftLog {
  id         String   @id @default(cuid())
  shiftId    String
  operatorId String
  agencyId   String
  action     ShiftAction
  message    String?
  createdAt  DateTime @default(now())

  shift      Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@index([shiftId])
  @@index([operatorId])
  @@index([agencyId])
}

model Profile {
  id                 String        @id @default(cuid())
  provider           ProviderSite
  externalId         String
  displayName        String?
  credentialLogin    String?
  credentialPassword String?
  profileId          String?
  status       ProfileStatus @default(ACTIVE)
  lastActiveAt       DateTime?
  groupId            String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  group              Group?        @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@unique([provider, externalId])
  @@index([groupId])
  @@index([status])
  @@index([provider, profileId])
}

model TalkyTimesSession {
  id           String   @id @default(cuid())
  profileId    String   @unique
  cookies      String
  token        String?
  refreshToken String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([profileId])
  @@index([expiresAt])
}

model AdminPanelConnection {
  id            String       @id @default(cuid())
  platform      ProviderSite
  email         String
  status        String       @default("connected")
  lastUpdatedAt DateTime?
  count         Int          @default(0)
  agencyId      String
  passwordEnc   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  agency        Agency       @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@unique([agencyId, platform, email])
  @@index([agencyId])
}

enum Role {
  OWNER
  OPERATOR
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum ProviderSite {
  TALKYTIMES
}

enum ProfileStatus {
  ACTIVE
  INACTIVE
}

enum ShiftAction {
  START
  END
}

import { Injectable, Logger, OnModuleDestroy } from '@nestjs/common';
import { Agent } from 'https';
import { Agent as HttpAgent } from 'http';

export interface ConnectionPoolConfig {
  maxSockets?: number;
  maxFreeSockets?: number;
  timeout?: number;
  keepAlive?: boolean;
  keepAliveMsecs?: number;
  maxCachedSessions?: number;
}

@Injectable()
export class ConnectionPoolService implements OnModuleDestroy {
  private readonly logger = new Logger(ConnectionPoolService.name);
  private httpsAgent: Agent;
  private httpAgent: HttpAgent;

  constructor() {
    const config: ConnectionPoolConfig = {
      maxSockets: 50,           // –ú–∞–∫—Å–∏–º—É–º —Å–æ–∫–µ—Ç—ñ–≤ –Ω–∞ —Ö–æ—Å—Ç
      maxFreeSockets: 10,       // –ú–∞–∫—Å–∏–º—É–º –≤—ñ–ª—å–Ω–∏—Ö —Å–æ–∫–µ—Ç—ñ–≤
      timeout: 30000,           // 30 —Å–µ–∫—É–Ω–¥ timeout
      keepAlive: true,          // –í–∫–ª—é—á–∏—Ç–∏ keep-alive
      keepAliveMsecs: 30000,    // 30 —Å–µ–∫—É–Ω–¥ keep-alive
      maxCachedSessions: 100    // –ö–µ—à TLS —Å–µ—Å—ñ–π
    };

    this.httpsAgent = new Agent({
      maxSockets: config.maxSockets,
      maxFreeSockets: config.maxFreeSockets,
      timeout: config.timeout,
      keepAlive: config.keepAlive,
      keepAliveMsecs: config.keepAliveMsecs,
      maxCachedSessions: config.maxCachedSessions,
    });

    this.httpAgent = new HttpAgent({
      maxSockets: config.maxSockets,
      maxFreeSockets: config.maxFreeSockets,
      timeout: config.timeout,
      keepAlive: config.keepAlive,
      keepAliveMsecs: config.keepAliveMsecs,
    });

    this.logger.log(`üîó Connection Pool initialized: maxSockets=${config.maxSockets}, keepAlive=${config.keepAlive}`);
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ HTTPS –∞–≥–µ–Ω—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ fetch
   */
  getHttpsAgent(): Agent {
    return this.httpsAgent;
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ HTTP –∞–≥–µ–Ω—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ fetch
   */
  getHttpAgent(): HttpAgent {
    return this.httpAgent;
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–≥–µ–Ω—Ç –¥–ª—è URL (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î HTTP/HTTPS)
   */
  getAgentForUrl(url: string): Agent | HttpAgent {
    return url.startsWith('https:') ? this.httpsAgent : this.httpAgent;
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É connection pool
   */
  getPoolStats() {
    const httpsStats = {
      maxSockets: this.httpsAgent.maxSockets,
      maxFreeSockets: this.httpsAgent.maxFreeSockets,
      sockets: Object.keys(this.httpsAgent.sockets || {}).length,
      freeSockets: Object.keys(this.httpsAgent.freeSockets || {}).length,
      requests: Object.keys(this.httpsAgent.requests || {}).length,
    };

    const httpStats = {
      maxSockets: this.httpAgent.maxSockets,
      maxFreeSockets: this.httpAgent.maxFreeSockets,
      sockets: Object.keys(this.httpAgent.sockets || {}).length,
      freeSockets: Object.keys(this.httpAgent.freeSockets || {}).length,
      requests: Object.keys(this.httpAgent.requests || {}).length,
    };

    return {
      https: httpsStats,
      http: httpStats,
      totalActiveSockets: httpsStats.sockets + httpStats.sockets,
      totalFreeSockets: httpsStats.freeSockets + httpStats.freeSockets,
      totalPendingRequests: httpsStats.requests + httpStats.requests,
    };
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ connection pool
   */
  logPoolStats() {
    const stats = this.getPoolStats();
    this.logger.debug(`üìä Connection Pool Stats:`, {
      totalActive: stats.totalActiveSockets,
      totalFree: stats.totalFreeSockets,
      totalPending: stats.totalPendingRequests,
      https: stats.https,
      http: stats.http,
    });
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç–∏ connection pool –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è
   */
  onModuleDestroy() {
    this.logger.log('üßπ Destroying connection pool...');
    
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
    this.httpsAgent.destroy();
    this.httpAgent.destroy();
    
    this.logger.log('‚úÖ Connection pool destroyed');
  }
}

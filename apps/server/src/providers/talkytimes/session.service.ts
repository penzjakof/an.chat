import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../prisma/prisma.service';

export interface TTSessionData {
	profileId: number;
	cookies: string;
	token?: string;
	refreshToken?: string;
	expiresAt: Date;
}

@Injectable()
export class TalkyTimesSessionService {
	constructor(private readonly prisma: PrismaService) {}

	async saveSession(profileId: string, sessionData: {
		cookies: string;
		token?: string;
		refreshToken?: string;
		expiresAt?: Date;
	}): Promise<void> {
		const expiresAt = sessionData.expiresAt || new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 –≥–æ–¥–∏–Ω–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

		// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Å—ñ—é –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
		await this.prisma.talkyTimesSession.upsert({
			where: { profileId },
			update: {
				cookies: sessionData.cookies,
				token: sessionData.token,
				refreshToken: sessionData.refreshToken,
				expiresAt,
				updatedAt: new Date()
			},
			create: {
				profileId,
				cookies: sessionData.cookies,
				token: sessionData.token,
				refreshToken: sessionData.refreshToken,
				expiresAt
			}
		});

		console.log(`üíæ Session saved for profile ${profileId}, expires at ${expiresAt}`);

		// –û–Ω–æ–≤–ª—é—î–º–æ lastActiveAt –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ
		try {
			await this.prisma.profile.updateMany({
				where: { profileId },
				data: { lastActiveAt: new Date() }
			});
		} catch (error) {
			console.warn(`Failed to update profile ${profileId}:`, error);
		}
	}

	async getSession(profileId: string): Promise<TTSessionData | null> {
		try {
			const session = await this.prisma.talkyTimesSession.findUnique({
				where: { profileId }
			});

			if (!session) {
				console.log(`‚ùå No session found for profile ${profileId}`);
				return null;
			}

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è —Å–µ—Å—ñ—è
			if (session.expiresAt < new Date()) {
				console.log(`‚è∞ Session expired for profile ${profileId}`);
				await this.removeSession(profileId);
				return null;
			}

			console.log(`‚úÖ Session found for profile ${profileId}, expires at ${session.expiresAt}`);
			return {
				profileId: parseInt(session.profileId),
				cookies: session.cookies,
				token: session.token || undefined,
				refreshToken: session.refreshToken || undefined,
				expiresAt: session.expiresAt
			};
		} catch (error) {
			console.error(`Error getting session for profile ${profileId}:`, error);
			return null;
		}
	}

	async removeSession(profileId: string): Promise<void> {
		try {
			await this.prisma.talkyTimesSession.delete({
				where: { profileId }
			});
			console.log(`üóëÔ∏è Session removed for profile ${profileId}`);
		} catch (error) {
			// –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö —Å–µ—Å—ñ–π
			console.warn(`Failed to remove session for profile ${profileId}:`, error);
		}
	}

	async authenticateProfile(profileId: string, cookies: string, token?: string, refreshToken?: string): Promise<TTSessionData> {
		const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 –≥–æ–¥–∏–Ω–∏
		const session: TTSessionData = {
			profileId: parseInt(profileId),
			cookies,
			token,
			refreshToken,
			expiresAt
		};

		await this.saveSession(profileId, session);
		return session;
	}

	async validateSession(profileId: string): Promise<boolean> {
		const session = await this.getSession(profileId);
		return session !== null;
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∑ cookies –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤
	getRequestHeaders(session: TTSessionData): Record<string, string> {
		// –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ headers
		// –î–æ–¥–∞—Ç–∫–æ–≤—ñ headers –ª–∞–º–∞—é—Ç—å TT API!
		// –í–ê–ñ–õ–ò–í–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–π –∂–µ case —è–∫ –≤ —Ä–æ–±–æ—á–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ
		return {
			'accept': 'application/json',
			'content-type': 'application/json',
			'cookie': session.cookies
		};
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
	async getActiveSession(profileId: number): Promise<TTSessionData | null> {
		try {
			const session = await this.prisma.talkyTimesSession.findFirst({
				where: {
					profileId: profileId.toString(),
					expiresAt: {
						gt: new Date()
					}
				}
			});

			if (!session) {
				return null;
			}

			return {
				profileId: parseInt(session.profileId),
				cookies: session.cookies,
				token: session.token || undefined,
				refreshToken: session.refreshToken || undefined,
				expiresAt: session.expiresAt
			};
		} catch (error) {
			console.error(`Error getting active session for profile ${profileId}:`, error);
			return null;
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π
	async getAllActiveSessions(): Promise<TTSessionData[]> {
		try {
			const sessions = await this.prisma.talkyTimesSession.findMany({
				where: {
					expiresAt: {
						gt: new Date()
					}
				}
			});

					return sessions.map(session => ({
			profileId: parseInt(session.profileId),
			cookies: session.cookies,
			token: session.token || undefined,
			refreshToken: session.refreshToken || undefined,
			expiresAt: session.expiresAt
		}));
		} catch (error) {
			console.error('Error getting active sessions:', error);
			return [];
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å–µ—Å—ñ–π
	async cleanupExpiredSessions(): Promise<void> {
		try {
			const result = await this.prisma.talkyTimesSession.deleteMany({
				where: {
					expiresAt: {
						lt: new Date()
					}
				}
			});
			console.log(`üßπ Cleaned up ${result.count} expired sessions`);
		} catch (error) {
			console.error('Error cleaning up expired sessions:', error);
		}
	}
}
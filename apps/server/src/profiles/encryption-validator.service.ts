import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { EncryptionService } from '../common/encryption/encryption.service';

@Injectable()
export class EncryptionValidatorService {
  private readonly logger = new Logger(EncryptionValidatorService.name);
  
  // –í—ñ–¥–æ–º—ñ –ø–∞—Ä–æ–ª—ñ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è)
  private readonly KNOWN_PASSWORDS: Record<string, string> = {
    'aoshlatyyy@gmail.com': 'aoshlatyyy',
    'aaallonnno44ka03@gmail.com': 'aaallonnno44ka03'
  };

  constructor(
    private readonly prisma: PrismaService,
    private readonly encryption: EncryptionService
  ) {}

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –∑–ª–∞–º–∞–Ω—ñ –ø–∞—Ä–æ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
   */
  async validateAndFixProfiles(): Promise<void> {
    this.logger.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤...');
    
    const profiles = await this.prisma.profile.findMany({
      where: {
        provider: 'TALKYTIMES',
        credentialPassword: { not: null }
      },
      // –í–∏–±–∏—Ä–∞—î–º–æ –ª–∏—à–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏, —â–æ–± –Ω–µ —á—ñ–ø–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ –ë–î
      select: {
        id: true,
        displayName: true,
        credentialLogin: true,
        credentialPassword: true,
      }
    });

    let fixedCount = 0;
    
    for (const profile of profiles) {
      try {
        // –°–ø—Ä–æ–±—É—î–º–æ –¥–µ—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å
        const decrypted = this.encryption.decrypt(profile.credentialPassword!);
        
        if (!decrypted) {
          this.logger.warn(`‚ùå –ü—Ä–æ—Ñ—ñ–ª—å ${profile.displayName} –º–∞—î –∑–ª–∞–º–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å`);
          
          // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–∏–º –ø–∞—Ä–æ–ª–µ–º
          const knownPassword = this.KNOWN_PASSWORDS[profile.credentialLogin!];
          if (knownPassword) {
            this.logger.log(`üîß –í–∏–ø—Ä–∞–≤–ª—è—é –ø–∞—Ä–æ–ª—å –¥–ª—è ${profile.displayName}...`);
            
            const newEncrypted = this.encryption.encrypt(knownPassword);
            await this.prisma.profile.update({
              where: { id: profile.id },
              data: { credentialPassword: newEncrypted }
            });
            
            fixedCount++;
            this.logger.log(`‚úÖ –ü–∞—Ä–æ–ª—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${profile.displayName}`);
          } else {
            this.logger.error(`‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è ${profile.displayName} (${profile.credentialLogin})`);
          }
        } else {
          this.logger.debug(`‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å ${profile.displayName} –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å`);
        }
      } catch (error) {
        this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é ${profile.displayName}:`, error);
      }
    }
    
    if (fixedCount > 0) {
      this.logger.log(`üéâ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤`);
    } else {
      this.logger.log(`‚úÖ –í—Å—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –º–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–∞—Ä–æ–ª—ñ`);
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
   */
  async validateProfile(profileId: string): Promise<boolean> {
    const profile = await this.prisma.profile.findUnique({
      where: { id: profileId }
    });

    if (!profile?.credentialPassword) {
      return false;
    }

    try {
      const decrypted = this.encryption.decrypt(profile.credentialPassword);
      return !!decrypted;
    } catch {
      return false;
    }
  }
}

import { Injectable, NotFoundException, ForbiddenException, BadRequestException, Inject } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { ProviderSite, ProfileStatus } from '@prisma/client';
import { TalkyTimesProvider } from '../providers/talkytimes/talkytimes.provider';
import { TALKY_TIMES_PROVIDER } from '../providers/providers.module';
import { EncryptionService } from '../common/encryption/encryption.service';
import { TalkyTimesSessionService } from '../providers/talkytimes/session.service';



@Injectable()
export class ProfilesService {
	constructor(
		private readonly prisma: PrismaService,
		@Inject(TALKY_TIMES_PROVIDER) private readonly talkyTimesProvider: TalkyTimesProvider,
		private readonly encryption: EncryptionService,
		private readonly sessionService: TalkyTimesSessionService
	) {}

	async create(params: { groupId: string; provider: ProviderSite; displayName?: string; credentialLogin?: string; credentialPassword?: string }, agencyCode: string) {
		const { groupId, provider, displayName, credentialLogin, credentialPassword } = params;
		
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≥—Ä—É–ø–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –∞–≥–µ–Ω—Ü—ñ—ó
		const group = await this.prisma.group.findFirst({
			where: { id: groupId, agency: { code: agencyCode } }
		});
		
		if (!group) {
			throw new NotFoundException('Group not found');
		}

		// –í–∞–ª—ñ–¥–∞—Ü—ñ—è TalkyTimes (–º'—è–∫–∏–π —Ä–µ–∂–∏–º): —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–∞–≤—ñ—Ç—å –±–µ–∑ —É—Å–ø—ñ—à–Ω–æ—ó –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
		let platformProfileId: string | undefined;
		let targetStatus: ProfileStatus = ProfileStatus.INACTIVE;
		if (provider === ProviderSite.TALKYTIMES) {
			if (credentialLogin && credentialPassword) {
				const validation = await this.talkyTimesProvider.validateCredentials(credentialLogin, credentialPassword);
				if (validation.success) {
					platformProfileId = validation.profileId;
					targetStatus = ProfileStatus.ACTIVE;
				} else {
					// –∑–∞–ª–∏—à–∞—î–º–æ INACTIVE, —â–æ–± –≤–ª–∞—Å–Ω–∏–∫ –º—ñ–≥ –¥–æ—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø—ñ–∑–Ω—ñ—à–µ
					targetStatus = ProfileStatus.INACTIVE;
				}
			} else {
				// –ë–µ–∑ –∫—Ä–µ–¥–µ–Ω—à–µ–ª—ñ–≤ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ —è–∫ INACTIVE
				targetStatus = ProfileStatus.INACTIVE;
			}
		}

		// –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π externalId –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é
		const externalId = `${provider.toLowerCase()}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

		return this.prisma.profile.create({
			data: {
				groupId,
				provider,
				externalId,
				displayName,
				credentialLogin,
				credentialPassword: this.encryption.encrypt(credentialPassword),
				profileId: platformProfileId,
				status: targetStatus,
			},
			include: {
				group: true
			}
		});
	}

	listByGroup(groupId: string) {
		return this.prisma.profile.findMany({ 
			where: { groupId },
			include: { group: true }
		});
	}

	listByAgencyCode(agencyCode: string) {
		return this.prisma.profile.findMany({
			where: {
				group: {
					agency: { code: agencyCode }
				}
			},
			include: {
				group: true
			},
			orderBy: { createdAt: 'desc' }
		});
	}

	async listByOperatorAccess(operatorId: string, agencyCode: string) {
		// –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—ñ –∑ –≥—Ä—É–ø, –¥–æ —è–∫–∏—Ö –º–∞—î –¥–æ—Å—Ç—É–ø –æ–ø–µ—Ä–∞—Ç–æ—Ä
		return this.prisma.profile.findMany({
			where: {
				group: {
					agency: { code: agencyCode },
					operators: {
						some: {
							operatorId: operatorId
						}
					}
				}
			},
			include: {
				group: true
			},
			orderBy: { createdAt: 'desc' }
		});
	}

	async hasAccessToProfile(profileId: string, operatorId: string, agencyCode: string): Promise<boolean> {
		const profile = await this.prisma.profile.findFirst({
			where: {
				id: profileId,
				group: {
					agency: { code: agencyCode },
					operators: {
						some: {
							operatorId: operatorId
						}
					}
				}
			}
		});
		return !!profile;
	}

	async update(profileId: string, updates: { displayName?: string; credentialLogin?: string; credentialPassword?: string; groupId?: string }, agencyCode: string) {
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –∞–≥–µ–Ω—Ü—ñ—ó
		const profile = await this.prisma.profile.findFirst({
			where: {
				id: profileId,
				group: { agency: { code: agencyCode } }
			}
		});

		if (!profile) {
			throw new NotFoundException('Profile not found');
		}

		const updateData: any = {};

		if (updates.displayName !== undefined) {
			updateData.displayName = updates.displayName;
		}
		if (updates.credentialLogin !== undefined) {
			updateData.credentialLogin = updates.credentialLogin;
		}
		if (updates.credentialPassword !== undefined) {
			updateData.credentialPassword = this.encryption.encrypt(updates.credentialPassword);
		}
		if (updates.groupId) {
			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –Ω–æ–≤–∞ –≥—Ä—É–ø–∞ —Ç–∞–∫–æ–∂ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –∞–≥–µ–Ω—Ü—ñ—ó
			const newGroup = await this.prisma.group.findFirst({
				where: { id: updates.groupId, agency: { code: agencyCode } }
			});
			if (!newGroup) {
				throw new NotFoundException('New group not found');
			}
			updateData.groupId = updates.groupId;
		}

		return this.prisma.profile.update({
			where: { id: profileId },
			data: updateData,
			include: { group: true }
		});
	}

	async delete(profileId: string, agencyCode: string) {
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –∞–≥–µ–Ω—Ü—ñ—ó
		const profile = await this.prisma.profile.findFirst({
			where: {
				id: profileId,
				group: { agency: { code: agencyCode } }
			}
		});

		if (!profile) {
			throw new NotFoundException('Profile not found');
		}

		const res = await this.prisma.profile.delete({ where: { id: profileId } });
		// –í—ñ–¥'—î–¥–Ω—É—î–º–æ RTM –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é, —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏–π
		try {
			// –õ—ñ–Ω–∏–≤–µ —ñ–º–ø–æ—Ä—Ç-—ñ–Ω–∂–µ–∫—Ç —á–µ—Ä–µ–∑ require, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
			const { TalkyTimesRTMService } = require('../providers/talkytimes/rtm.service');
			const rtm: InstanceType<typeof TalkyTimesRTMService> | undefined = (global as any)?.rtmServiceInstance;
			if (rtm && res.profileId) {
				rtm.disconnectProfile(res.profileId);
			}
		} catch {}
		return res;
	}

	async authenticateProfile(profileId: string, password: string, agencyCode: string) {
		console.log(`üîê Authenticating profile ${profileId} with agencyCode ${agencyCode}`);
		
		// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
		const profile = await this.prisma.profile.findFirst({
			where: {
				id: profileId,
				group: {
					agency: { code: agencyCode }
				}
			}
		});

		if (!profile) {
			console.log(`‚ùå Profile ${profileId} not found for agency ${agencyCode}`);
			throw new NotFoundException('Profile not found');
		}
		
		console.log(`‚úÖ Profile found: ${profile.displayName}, credentialLogin: ${profile.credentialLogin}`);

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —î –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ
		if (!profile.credentialPassword || !profile.credentialLogin) {
			throw new BadRequestException('Profile credentials not found');
		}

		// –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø–∞—Ä–æ–ª—å (–¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏). –ù–µ –±–ª–æ–∫—É—î–º–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø—Ä–∏ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ ‚Äî
		// –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π –ø–∞—Ä–æ–ª—å —ñ –∑–∞ —É—Å–ø—ñ—Ö—É –æ–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π.
		const decryptedPassword = this.encryption.decrypt(profile.credentialPassword);
		const passwordsMatch = decryptedPassword === password;
		console.log(`üîì Stored TT password matches provided? ${passwordsMatch}`);

		// –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
		console.log(`üöÄ Calling TalkyTimes validateCredentials for ${profile.credentialLogin}`);
		const result = await this.talkyTimesProvider.validateCredentials(profile.credentialLogin, password);
		
		console.log(`üì• TalkyTimes auth result:`, { success: result.success, error: result.error, profileId: result.profileId });
		
		if (!result.success) {
			console.log(`‚ùå TalkyTimes authentication failed: ${result.error}`);
			throw new BadRequestException(result.error || 'Authentication failed');
		}

		// –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ (profileId/–ø–∞—Ä–æ–ª—å)
		const updateData: any = {};
		if (result.profileId && result.profileId !== profile.profileId) {
			console.log(`üîÑ Updating profileId from ${profile.profileId} to ${result.profileId}`);
			updateData.profileId = result.profileId;
		}
		if (!passwordsMatch) {
			updateData.credentialPassword = this.encryption.encrypt(password);
		}
		if (Object.keys(updateData).length > 0) {
			await this.prisma.profile.update({ where: { id: profileId }, data: updateData });
		}

		console.log(`‚úÖ Profile authenticated successfully: ${result.profileId || profile.profileId}`);
		return {
			success: true,
			profileId: result.profileId || profile.profileId,
			message: 'Profile authenticated successfully'
		};
	}

	async getProfileSessionStatus(profileId: string, agencyCode: string) {
		// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
		const profile = await this.prisma.profile.findFirst({
			where: {
				id: profileId,
				group: {
					agency: { code: agencyCode }
				}
			}
		});

		if (!profile) {
			throw new NotFoundException('Profile not found');
		}

		if (!profile.profileId) {
			return {
				authenticated: false,
				message: 'Profile not authenticated'
			};
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó
		const isValid = await this.sessionService.validateSession(profile.profileId);
		
		return {
			authenticated: isValid,
			profileId: profile.profileId,
			message: isValid ? 'Session is active' : 'Session expired'
		};
	}

	async getProfileData(profileId: string, agencyCode: string) {
		const profile = await this.prisma.profile.findFirst({
			where: { id: profileId, group: { agency: { code: agencyCode } } }
		});

		if (!profile || !profile.profileId) {
			return { success: false, error: 'Profile not found or not authenticated' };
		}

		if (!this.talkyTimesProvider.fetchProfileData) {
			return { success: false, error: 'Profile data fetching not supported' };
		}

		return this.talkyTimesProvider.fetchProfileData(profile.profileId);
	}

	async getClientPhotos(profileId: string, clientId: number, agencyCode: string) {
		const profile = await this.prisma.profile.findFirst({
			where: { id: profileId, group: { agency: { code: agencyCode } } }
		});

		if (!profile || !profile.profileId) {
			return { success: false, error: 'Profile not found or not authenticated' };
		}

		if (!this.talkyTimesProvider.fetchClientPhotos) {
			return { success: false, error: 'Client photos fetching not supported' };
		}

		return this.talkyTimesProvider.fetchClientPhotos(profile.profileId, clientId);
	}

	async getMyPublicProfile(profileId: string, agencyCode: string) {
		const profile = await this.prisma.profile.findFirst({
			where: { id: profileId, group: { agency: { code: agencyCode } } }
		});

		if (!profile || !profile.profileId) {
			return { success: false, error: 'Profile not found or not authenticated' };
		}

		return this.talkyTimesProvider.fetchMyPublicProfile(profile.profileId);
	}

	async getMyPhotos(profileId: string, agencyCode: string) {
		const profile = await this.prisma.profile.findFirst({
			where: { id: profileId, group: { agency: { code: agencyCode } } }
		});

		if (!profile || !profile.profileId) {
			return { success: false, error: 'Profile not found or not authenticated' };
		}

		return this.talkyTimesProvider.fetchMyPhotos(profile.profileId);
	}

	async getClientPublicProfile(profileId: string, clientId: number, agencyCode: string) {
        console.log(`üîç DEBUG getClientPublicProfile: profileId=${profileId}, clientId=${clientId}, agencyCode=${agencyCode}`);
		const profile = await this.prisma.profile.findFirst({
			where: { id: profileId, group: { agency: { code: agencyCode } } }
		});
        console.log(`üîç DEBUG profile found:`, profile ? {id: profile.id, profileId: profile.profileId, groupId: profile.groupId} : null);

		if (!profile || !profile.profileId) {
			return { success: false, error: 'Profile not found or not authenticated' };
		}

		const res = await this.talkyTimesProvider.fetchProfiles(profile.profileId, [clientId]);
		if (!res.success) {
			return { success: false, error: res.error || 'Failed to load client profile' };
		}
		const client = (res.profiles || [])[0];
		return { success: true, profile: client };
	}

	async getGiftLimits(profileId: string, clientId: number, agencyCode: string) {
		console.log(`üéÅ Getting gift limits for profile ${profileId}, client ${clientId}, agency ${agencyCode}`);

		const profile = await this.prisma.profile.findFirst({
			where: {
				id: profileId,
				group: {
					agency: { code: agencyCode }
				}
			}
		});

		if (!profile) {
			throw new NotFoundException('Profile not found');
		}

		if (!profile.profileId) {
			throw new BadRequestException('Profile not authenticated');
		}

		// –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤ –∑ TalkyTimes –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
		return this.talkyTimesProvider.getVirtualGiftLimits(profile.profileId, clientId);
	}

	async getGiftList(profileId: string, clientId: number, cursor: string = '', limit: number = 30, agencyCode: string) {
		console.log(`üéÅ Getting gift list for profile ${profileId}, client ${clientId}, cursor=${cursor}, limit=${limit}, agency ${agencyCode}`);

		const profile = await this.prisma.profile.findFirst({
			where: {
				id: profileId,
				group: {
					agency: { code: agencyCode }
				}
			}
		});

		if (!profile) {
			throw new NotFoundException('Profile not found');
		}

		if (!profile.profileId) {
			throw new BadRequestException('Profile not authenticated');
		}

		// –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –∑ TalkyTimes –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
		const result = await this.talkyTimesProvider.getVirtualGiftList(profile.profileId, clientId, cursor, limit);

		// –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
		if (result.success && result.data) {
			console.log(`üéÅ ProfilesService returning ${result.data.items?.length || 0} gifts`);
			result.data.items?.slice(0, 2).forEach((item, index) => {
				console.log(`üéÅ Gift ${index + 1}: ${item.name}, imageSrc: ${item.imageSrc}`);
			});
		}

		return result;
	}

	async sendGift(profileId: string, clientId: number, giftId: number, message: string = '', agencyCode: string) {
		console.log(`üéÅ Sending gift ${giftId} from profile ${profileId} to client ${clientId}, message: "${message}"`);

		const profile = await this.prisma.profile.findFirst({
			where: {
				id: profileId,
				group: {
					agency: { code: agencyCode }
				}
			}
		});

		if (!profile) {
			throw new NotFoundException('Profile not found');
		}

		if (!profile.profileId) {
			throw new BadRequestException('Profile not authenticated');
		}

		const result = await this.talkyTimesProvider.sendVirtualGift(profile.profileId, clientId, giftId, message);

		console.log(`üéÅ Gift send result:`, result);
		return result;
	}
}
